<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>langchain入门</title>
      <link href="/AIGC/langchainBasic/"/>
      <url>/AIGC/langchainBasic/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h2 id="一、LangChain快速入门与组件介绍"><a href="#一、LangChain快速入门与组件介绍" class="headerlink" title="一、LangChain快速入门与组件介绍"></a>一、LangChain快速入门与组件介绍</h2><h3 id="1-Langchain简介"><a href="#1-Langchain简介" class="headerlink" title="1. Langchain简介"></a>1. Langchain简介</h3><p>LangChain 是一个开源的 Python AI 应用开发框架, 它提供了构建基于大模型的 AI 应用所需的模块和工具。通过 LangChain, 开发者可以轻松地与大型语言模型 (LLM) 集成, 完成文本生成、问答、翻译、对话等任务。LangChain 降低了 AI 应用开发的门槛, 让任何人都可以基于 LLM 构建属于自己的创意应用。</p><h3 id="2-LangChain-特性"><a href="#2-LangChain-特性" class="headerlink" title="2. LangChain 特性"></a>2. LangChain 特性</h3><p><strong>1. LLM 和提示（Prompt）</strong></p><ul><li><strong>API 抽象与统一接口</strong><br>LangChain 通过 <code>Models</code> 组件（如 <code>LLMs</code>、<code>Chat Models</code>、<code>Embeddings Models</code>）为不同大模型（如 OpenAI、HuggingFace、阿里通义等）提供统一接口。开发者无需关心底层 API 差异，只需通过配置即可切换模型。例如，使用阿里通义模型时，只需设置 <code>DASHSCOPE_API_KEY</code> 并调用 <code>ChatTongyi</code> 类。</li><li><strong>Prompt 模板管理</strong><br>LangChain 的 <code>PromptTemplate</code> 支持动态变量插入与多模板组合。例如，通过 <code>PipelinePromptTemplate</code> 可将系统角色、示例对话和用户输入拼接为完整提示，提升代码复用性。此外，<code>ExampleSelectors</code> 根据输入长度或语义相似度动态选择示例，优化 Token 使用。</li></ul><p><strong>2. 链（Chain）</strong></p><ul><li><strong>预置链与自定义链</strong><br>LangChain 内置常见任务链（如问答链、摘要链），也支持通过 <code>BaseChain</code> 自定义逻辑。例如，<code>create_sql_query_chain</code> 可将自然语言转换为 SQL 语句，再通过 <code>QuerySQLDataBaseTool</code> 执行查询，最终用自然语言解释结果。这种链式设计将复杂流程分解为可组合的步骤，适合构建端到端应用。</li><li><strong>链的灵活性</strong><br>开发者可通过 <code>SimpleSequentialChain</code> 串联多个链，每个步骤可使用不同模型或工具。例如，先调用 LLM 解析用户意图，再调用搜索 API 获取数据，最后生成响应。</li></ul><p><strong>3. LCEL（LangChain Expression Language）</strong></p><ul><li><strong>工作流编排</strong><br>LCEL 通过声明式语法定义 AI 任务流程。例如，使用 <code>RunnablePassthrough</code> 传递上下文，结合 <code>|</code> 运算符连接组件（如提示模板、模型调用、输出解析器），实现流水线处理。LCEL 还支持异步、流式处理和错误重试，非常适合生产环境。</li></ul><p><strong>4. 数据增强生成（RAG）</strong></p><ul><li><strong>解决 Token 限制与数据实时性</strong><br>LangChain 通过 <code>Document Loaders</code> 加载外部数据（如 PDF、网页），使用 <code>Text Splitters</code> 分割长文本，再通过 <code>Embeddings</code> 模型向量化后存入向量数据库（如 FAISS、Chroma）。查询时，检索相关段落注入提示词，增强模型回答的准确性与时效性。例如，京东云团队利用 RAG 构建了基于文档的问答系统，支持处理 300 页以上的 PDF。</li></ul><p><strong>5. Agents</strong></p><ul><li><strong>LLM 作为决策引擎</strong><br>Agent 将 LLM 作为“大脑”，根据用户目标自主调用工具（如计算器、API、数据库）。例如，Pandas Agent 可解析自然语言指令，生成 Pandas 代码操作 DataFrame，而 SQL Agent 能将“统计 7 月 APP 渠道访客数”转换为 SQL 查询并执行。</li><li><strong>动态决策流程</strong><br>Agent 通过 <code>ReAct</code> 框架（Reasoning and Acting）循环执行“思考-行动-观察”步骤，直至完成任务。例如，用户提问“明天天气如何？”时，Agent 可能先调用天气 API，再结合结果生成回复。</li></ul><p><strong>6. 模型记忆（Memory）</strong></p><ul><li><strong>上下文管理</strong><br>LangChain 提供多种记忆组件：<code>ConversationBufferMemory</code> 存储完整对话历史，<code>ConversationSummaryMemory</code> 压缩历史为摘要，<code>EntityMemory</code> 提取关键实体。这些组件可集成到链或 Agent 中，支持多轮对话场景。</li></ul><h3 id="3-LangChain-框架组成"><a href="#3-LangChain-框架组成" class="headerlink" title="3. LangChain 框架组成"></a>3. LangChain 框架组成</h3><p><img src="/Users/songzuoqiang/Downloads/img/boke/langchain/1736067256624-a78054a0-9dda-49e1-9309-a78e504f5d61.svg" alt="img"></p><p>LangChain 框架由几个部分组成，包括</p><ul><li><strong>LangChain 库</strong>：Python 和 JavaScript 库。包含接口和集成多种组件的运行时基础，以及现成的链和代理的实现。</li><li><strong>LangChain 模板</strong>：Langchain 官方提供的一些 AI 任务模板。</li><li><strong>LangServe</strong>：通过 REST API 部署链，支持快速集成到现有系统。例如，将 SQL 查询链发布为 API，供前端调用。</li><li><strong>LangSmith</strong>：提供全生命周期管理：调试时追踪链的执行步骤，生产环境监控性能与异常，并通过评估工具优化提示词。</li></ul><h3 id="4-LangChain-库-Libraries"><a href="#4-LangChain-库-Libraries" class="headerlink" title="4. LangChain 库 (Libraries)"></a>4. LangChain 库 (Libraries)</h3><p>LangChain 库本身由几个不同的包组成。</p><ul><li><p><strong>langchain-core</strong>：基础抽象和 LangChain 表达语言。</p></li><li><p><strong>langchain-community</strong>：第三方集成，主要包括 langchain 集成的第三方组件。</p></li><li><p><strong>langchain</strong>：主要包括链 (chain)、代理(agent) 和检索策略。</p></li></ul><h3 id="5-langchain-任务处理流程"><a href="#5-langchain-任务处理流程" class="headerlink" title="5. langchain 任务处理流程"></a>5. langchain 任务处理流程</h3><p><img src="/Users/songzuoqiang/Downloads/img/boke/langchain/1736067256753-a58b2521-7be1-4673-b462-732ea65725a0.jpeg" alt="img"></p><p>如上图，langChain 提供一套提示词模板 (prompt template) 管理工具，负责处理提示词，然后传递给大模型处理，最后处理大模型返回的结果，LangChain 对大模型的封装主要包括 LLM 和 Chat Model 两种类型。</p><ul><li><p>LLM - 问答模型，模型接收一个文本输入，然后返回一个文本结果。</p></li><li><p>Chat Model - 对话模型，接收一组对话消息，然后返回对话消息，类似聊天消息一样。</p></li></ul><h3 id="6-LangChain核心概念"><a href="#6-LangChain核心概念" class="headerlink" title="6. LangChain核心概念"></a>6. LangChain核心概念</h3><ol><li><p><strong>LLMs</strong>：LangChain 封装的基础模型，模型接收一个文本输入，然后返回一个文本结果。</p><ul><li><strong>LLMs</strong><br>适用于单轮文本生成（如生成笑话、摘要），输入输出均为纯文本。</li><li><strong>Chat Models</strong><br>专为多轮对话设计，支持 <code>SystemMessage</code>（设置角色）、<code>HumanMessage</code>（用户输入）、<code>AIMessage</code>（模型回复）等结构化消息类型。例如，通过 <code>SystemMessage</code> 指定“模型作为代码专家”，可提升代码生成质量。</li></ul></li><li><p><strong>Chat Models</strong>：聊天模型（或者成为对话模型），与 LLMs 不同，这些模型专为对话场景而设计。模型可以接收一组对话消息，然后返回对话消息，类似聊天消息一样。</p></li><li><p><strong>消息（Message）</strong>：指的是聊天模型（Chat Models）的消息内容，消息类型包括包括 HumanMessage、AIMessage、SystemMessage、FunctionMessage 和 ToolMessage 等多种类型的消息。</p></li><li><p><strong>提示 (prompts)</strong> ：LangChain 封装了一组专门用于提示词 (prompts) 管理的工具类，方便我们格式化提示词 (prompts) 内容。</p></li><li><p><strong>输出解析器 (Output Parsers)</strong> ：如上图介绍，Langchain 接受大模型 (llm) 返回的文本内容之后，可以使用专门的输出解析器对文本内容进行格式化，例如解析 json、或者将 llm 输出的内容转成 python 对象。</p></li><li><p><strong>Retrievers</strong> ：为方便我们将私有数据导入到大模型（LLM）, 提高模型回答问题的质量，LangChain 封装了检索框架 (Retrievers)，方便我们加载文档数据、切割文档数据、存储和检索文档数据。</p></li><li><p><strong>向量存储 (Vector stores)</strong> ：为支持私有数据的语义相似搜索，langchain 支持多种向量数据库。</p></li><li><p><strong>Agents</strong> ：智能体 (Agents)，通常指的是以大模型（LLM）作为决策引擎，根据用户输入的任务，自动调用外部系统、硬件设备共同完成用户的任务，是一种以大模型（LLM）为核心的应用设计模式。</p></li></ol><h3 id="7-LangChain应用场景"><a href="#7-LangChain应用场景" class="headerlink" title="7. LangChain应用场景"></a>7. LangChain应用场景</h3><ul><li><p>对话机器人: 构建智能的对话助手、客服机器人、聊天机器人等。</p></li><li><p>知识库问答: 结合知识图谱, 进行开放域问题的问答服务。</p></li><li><p>智能写作: 如文章写作、创意写作、文本摘要等</p></li></ul><h3 id="8-LangChain快速入门"><a href="#8-LangChain快速入门" class="headerlink" title="8. LangChain快速入门"></a>8. LangChain快速入门</h3><h5 id="安装LangChain"><a href="#安装LangChain" class="headerlink" title="安装LangChain"></a>安装LangChain</h5><p>我们可以使用Pip和Conda安装LangChain相关依赖。以下是LangChain库以及相关组件所需要的依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pip install langchain</span><br><span class="line">pip install langchain-openai</span><br><span class="line">pip install langchain-community</span><br><span class="line">pip install chromadb</span><br><span class="line">pip install defusedxml</span><br><span class="line">pip install wikipedia</span><br><span class="line">pip install faiss-cpu</span><br><span class="line">pip install langchain_chroma</span><br><span class="line">pip install toml</span><br><span class="line">pip install streamlit==1.39.0</span><br><span class="line">pip install -U langgraph</span><br><span class="line">pip install python-dotenv</span><br></pre></td></tr></table></figure><h5 id="初始化模型"><a href="#初始化模型" class="headerlink" title="初始化模型"></a>初始化模型</h5><p>在使用LangChain之前，需要导入LangChain x OpenAI集成包，并设置deepseek的API密钥作为环境变量或直接传递给OpenAI LLM类。</p><p>首先，获取deepseek密钥，可以通过创建账户并访问<a href="https://api-docs.deepseek.com/zh-cn/">此链接</a>来获取。然后，可以将API密钥设置为环境变量，方法如下，首先在项目的<strong>根目录</strong>中创建.env文件，然后添加如下信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DEEPSEEK_API_KEY=your_api_key</span><br><span class="line">DEEPSEEK_BASE_URL=https://api.deepseek.com</span><br></pre></td></tr></table></figure><p>接下来，初始化模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 .env 文件中的环境变量</span></span><br><span class="line">load_dotenv()</span><br><span class="line"></span><br><span class="line">llm = ChatOpenAI(</span><br><span class="line">    model=<span class="string">&#x27;deepseek-chat&#x27;</span>,</span><br><span class="line">    max_tokens=<span class="number">1024</span>,</span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.getenv(<span class="string">&quot;DEEPSEEK_BASE_URL&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="使用LLM"><a href="#使用LLM" class="headerlink" title="使用LLM"></a>使用LLM</h5><p>使用LLM来回答问题非常简单。可以直接调用LLM的<code>invoke</code>方法，并传入问题作为参数。此外，还可以通过提示模板(prompt template)生成提示词，用于向模型(LLM)发送指令。</p><p>下面演示了如何构建一个简单的LLM链(chains)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个提示模板(prompt template)</span></span><br><span class="line"><span class="comment"># 这里以对话模型的消息格式为例子，不熟悉openai对话模型消息格式，建议先学习OpenAI的API教程</span></span><br><span class="line"><span class="comment"># 下面消息模板，定义两条消息，system消息告诉模型扮演什么角色，user消息代表用户输入的问题，这里用了一个占位符&#123;input&#125; 代表接受一个模版参数input。</span></span><br><span class="line">prompt = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;你是一个著名的宋词研究学者&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;user&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于LCEL 表达式构建LLM链，lcel语法类似linux的pipeline语法，从左到右按顺序执行</span></span><br><span class="line"><span class="comment"># 下面编排了一个简单的工作流，首先执行prompt完成提示词模板(prompt template)格式化处理， 然后将格式化后的prompt传递给llm模型执行，最终返回llm执行结果。</span></span><br><span class="line">chain = prompt | llm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用LLM链并设置模板参数input,  invoke会把调用参数传递给prompt提示模板，开始chain定义的步骤开始逐步执行。</span></span><br><span class="line">result = chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;以怀才不遇，壮志难酬为主题写一首词牌名为”水调歌头“的词&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>模型响应如下，可见deepseek相较于国产的其他模型来说还是非常强大的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content=<span class="string">&#x27;《水调歌头·书愤》\n\n长剑倚天啸，孤影立寒秋。\n十年磨尽霜刃，空负少年头。\n欲挽银河洗甲，却叹冯唐易老，壮志几时酬？\n醉眼望星斗，清泪落吴钩。\n\n匣中鸣，弦上恨，总难休。\n男儿意气，何日能破玉门囚？\n纵使封侯无分，也要昆仑勒石，浩气贯神州。\n莫道书生拙，风雨会中流。&#x27;</span> additional_kwargs=&#123;<span class="string">&#x27;refusal&#x27;</span>: <span class="literal">None</span>&#125; response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: <span class="number">112</span>, <span class="string">&#x27;prompt_tokens&#x27;</span>: <span class="number">32</span>, <span class="string">&#x27;total_tokens&#x27;</span>: <span class="number">144</span>, <span class="string">&#x27;completion_tokens_details&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;cached_tokens&#x27;</span>: <span class="number">0</span>&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: <span class="number">32</span>&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_3d5141a69a_prod0225&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;b097c427-a719-4deb-a642-ae719bc339a9&#x27;</span>, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: <span class="literal">None</span>&#125; <span class="built_in">id</span>=<span class="string">&#x27;run-6f7de997-5dc6-43d2-baa0-45924f48e226-0&#x27;</span> usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: <span class="number">32</span>, <span class="string">&#x27;output_tokens&#x27;</span>: <span class="number">112</span>, <span class="string">&#x27;total_tokens&#x27;</span>: <span class="number">144</span>, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: <span class="number">0</span>&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="输出转换"><a href="#输出转换" class="headerlink" title="输出转换"></a>输出转换</h5><p>LLM的输出通常是一条消息，为了更方便处理结果，可以将消息转换为字符串。下面展示如何将LLM的输出消息转换为字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="comment"># 引入langchain聊天场景的提示词模版</span></span><br><span class="line"><span class="keyword">from</span> langchain_core.output_parsers <span class="keyword">import</span> StrOutputParser</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line">load_dotenv()</span><br><span class="line"></span><br><span class="line">llm = ChatOpenAI(</span><br><span class="line">    model=<span class="string">&#x27;deepseek-chat&#x27;</span>,</span><br><span class="line">    max_tokens=<span class="number">1024</span>,</span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.getenv(<span class="string">&quot;DEEPSEEK_BASE_URL&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据message生成提示词模版</span></span><br><span class="line">prompt = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;你是一个著名的宋词研究学者&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;user&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>)</span><br><span class="line">])</span><br><span class="line"><span class="comment"># 创建一个字符串输出解析器</span></span><br><span class="line">output_parser = StrOutputParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过langchain的链式调用，生成一个chain</span></span><br><span class="line">chain = prompt | llm | output_parser</span><br><span class="line"></span><br><span class="line">result = chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;以怀才不遇，壮志难酬为主题写一首词牌名为”水调歌头“的词&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">《水调歌头·书愤》</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">长剑倚天啸，孤影对残灯。</span></span><br><span class="line"><span class="string">十年磨就霜刃，无处试锋棱。</span></span><br><span class="line"><span class="string">欲驾长鲸碧海，却困蓬蒿荻苇，</span></span><br><span class="line"><span class="string">风雨暗相惊。</span></span><br><span class="line"><span class="string">醉眼挑灯看，匣底作龙鸣。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">射斗牛，光焰动，为谁明？</span></span><br><span class="line"><span class="string">男儿意气，空负燕颔虎头形。</span></span><br><span class="line"><span class="string">纵使封侯有骨，无奈时乖命蹇，</span></span><br><span class="line"><span class="string">白发已丛生。</span></span><br><span class="line"><span class="string">且尽杯中物，卧听晚潮声。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注：本词通过&quot;长剑&quot;、&quot;霜刃&quot;等意象，表现志士的英武气概；以&quot;困蓬蒿&quot;、&quot;白发丛生&quot;等语，道出英雄失路的悲愤。下阕连用&quot;射斗牛&quot;、&quot;燕颔虎头&quot;典故，强化怀才不遇主题。结句&quot;卧听晚潮&quot;以景结情，留下苍凉余韵。全词跌宕起伏，符合词牌声情特点。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="二、LangChain提示词工程应用实践"><a href="#二、LangChain提示词工程应用实践" class="headerlink" title="二、LangChain提示词工程应用实践"></a>二、LangChain提示词工程应用实践</h2><h3 id="1-什么是提示词模板？"><a href="#1-什么是提示词模板？" class="headerlink" title="1. 什么是提示词模板？"></a>1. 什么是提示词模板？</h3><p>语言模型以文本作为输入 - 这个文本通常被称为提示词(prompt)。在开发过程中，对于提示词通常不能直接硬编码，不利于提示词管理，而是通过提示词模板进行维护，类似开发过程中遇到的短信模板、邮件模板等等。提示词模板本质上跟平时大家使用的邮件模板、短信模板没什么区别，就是一个字符串模板，模板可以包含一组模板参数，通过模板参数值可以替换模板对应的参数。</p><p>一个提示词模板可以包含下面内容：</p><ul><li><p>发给大语言模型（LLM）的指令。</p></li><li><p>一组问答示例，以提醒AI以什么格式返回请求。</p></li><li><p>发给语言模型的问题。</p></li></ul><h3 id="2-如何创建提示词模板-prompt-template"><a href="#2-如何创建提示词模板-prompt-template" class="headerlink" title="2. 如何创建提示词模板(prompt template)"></a>2. 如何创建提示词模板(prompt template)</h3><h5 id="创建一个提示词模板"><a href="#创建一个提示词模板" class="headerlink" title="创建一个提示词模板"></a>创建一个提示词模板</h5><p>可以使用 <code>PromptTemplate</code> 类创建简单的提示词。提示词模板可以内嵌任意数量的模板参数，然后通过参数值格式化模板内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> PromptTemplate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个提示模板，包含adjective和content两个模板变量，模板变量使用&#123;&#125;包括起来</span></span><br><span class="line">prompt_template = PromptTemplate.from_template(</span><br><span class="line">    <span class="string">&quot;给我讲一个关于&#123;content&#125;的&#123;adjective&#125;笑话。&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过模板参数格式化提示模板</span></span><br><span class="line">result = prompt_template.<span class="built_in">format</span>(content=<span class="string">&quot;书生求学&quot;</span>, adjective=<span class="string">&quot;冷&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>模板输出结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给我讲一个关于书生求学的冷笑话。</span><br></pre></td></tr></table></figure><h5 id="创建聊天消息提示词模板"><a href="#创建聊天消息提示词模板" class="headerlink" title="创建聊天消息提示词模板"></a>创建聊天消息提示词模板</h5><p>聊天模型（Chat Model）以聊天消息列表作为输入，这个聊天消息列表的消息内容也可以通过提示词模板进行管理。这些聊天消息与原始字符串不同，因为每个消息都与“角色(role)”相关联。</p><p>例如，在OpenAI的<a href="https://platform.openai.com/docs/guides/text-generation/chat-completions-api">Chat Completion API</a>中，Openai的聊天模型，给不同的聊天消息定义了三种角色类型分别是助手(assistant)、人类（human）或系统（system）角色：</p><ul><li><p>助手(Assistant) 消息指的是当前消息是AI回答的内容</p></li><li><p>人类（user）消息指的是你发给AI的内容</p></li><li><p>系统（system）消息通常是用来给AI身份进行描述。</p></li></ul><p>创建聊天消息模板例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入langchain提示词模版库</span></span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过一个消息数组创建聊天消息模板</span></span><br><span class="line"><span class="comment"># 数组每一个元素代表一条消息，每个消息元组，第一个元素代表消息角色（也成为消息类型），第二个元素代表消息内容。</span></span><br><span class="line"><span class="comment"># 消息角色：system代表系统消息、human代表人类消息，ai代表LLM返回的消息内容</span></span><br><span class="line"><span class="comment"># 下面消息定义了2个模板参数name和user_input</span></span><br><span class="line">chat_template = ChatPromptTemplate.from_messages(</span><br><span class="line">    [</span><br><span class="line">        (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;你是一名人工智能助手，你的名字是&#123;name&#125;。&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;你好&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;ai&quot;</span>, <span class="string">&quot;我很好，谢谢！&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;&#123;user_input&#125;&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过模板参数格式化模板内容</span></span><br><span class="line">messages = chat_template.format_messages(name=<span class="string">&quot;SmallScholar&quot;</span>, user_input=<span class="string">&quot;你的名字叫什么？&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(messages)</span><br><span class="line"><span class="comment"># [SystemMessage(content=&#x27;你是一名人工智能助手，你的名字是SmallScholar。&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;), HumanMessage(content=&#x27;你好&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;), AIMessage(content=&#x27;我很好，谢谢！&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;), HumanMessage(content=&#x27;你的名字叫什么？&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;)]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另外一种消息格式例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> HumanMessagePromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> SystemMessage</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用langchain定义的SystemMessage、HumanMessagePromptTemplate等工具类定义消息，跟前面的例子类似，下面定义了两条消息</span></span><br><span class="line">chat_template = ChatPromptTemplate.from_messages(</span><br><span class="line">    [</span><br><span class="line">        SystemMessage(</span><br><span class="line">            content=(</span><br><span class="line">                <span class="string">&quot;你是一个乐于助人的助手&quot;</span></span><br><span class="line">            )</span><br><span class="line">        ),</span><br><span class="line">        HumanMessagePromptTemplate.from_template(<span class="string">&quot;&#123;text&#125;&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用模板参数格式化模板</span></span><br><span class="line">messages = chat_template.format_messages(text=<span class="string">&quot;书生喜欢古诗词&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(messages)</span><br><span class="line"><span class="comment"># [SystemMessage(content=&#x27;你是一个乐于助人的助手，可以润色内容，使其看起来起来更简单易读。&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;), HumanMessage(content=&#x27;我不喜欢吃好吃的东西&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;)]</span></span><br></pre></td></tr></table></figure><p>通常我们不会直接使用format_messages函数格式化提示模板(prompt templae)内容, 而是交给Langchain框架自动处理。</p><h5 id="在创建模板时使用MessagesPlaceholder"><a href="#在创建模板时使用MessagesPlaceholder" class="headerlink" title="在创建模板时使用MessagesPlaceholder"></a>在创建模板时使用MessagesPlaceholder</h5><p>这个提示模板负责在特定位置添加消息列表。 在上面的 ChatPromptTemplate 中，我们看到了如何格式化两条消息，每条消息都是一个字符串。 但是，如果我们希望用户传入一个消息列表，我们将其插入到特定位置，该怎么办？ 这就是你使用 MessagesPlaceholder 的方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate, MessagesPlaceholder</span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> HumanMessage, SystemMessage</span><br><span class="line"></span><br><span class="line">prompt_template = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;你是宋书生的人工智能助手&quot;</span>),</span><br><span class="line">    <span class="comment">#可以传入一组消息</span></span><br><span class="line">    MessagesPlaceholder(<span class="string">&quot;msgs&quot;</span>)</span><br><span class="line">])</span><br><span class="line">result = prompt_template.invoke(&#123;<span class="string">&quot;msgs&quot;</span>: [HumanMessage(content=<span class="string">&quot;你好!&quot;</span>),HumanMessage(content=<span class="string">&quot;你好，我是宋书生!&quot;</span>)]&#125;)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment">#messages=[SystemMessage(content=&#x27;你是宋书生的人工智能助手&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;), HumanMessage(content=&#x27;你好!&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;), HumanMessage(content=&#x27;你好，我是宋书生!&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;)]</span></span><br></pre></td></tr></table></figure><p>这将生成两条消息，第一条是系统消息，第二条是我们传入的 HumanMessage。 如果我们传入了 5 条消息，那么总共会生成 6 条消息（系统消息加上传入的 5 条消息）。 这对于将一系列消息插入到特定位置非常有用。 另一种实现相同效果的替代方法是，不直接使用 MessagesPlaceholder 类，而是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">prompt_template = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;你是宋书生的人工智能助手&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;placeholder&quot;</span>, <span class="string">&quot;&#123;msgs&#125;&quot;</span>) <span class="comment"># &lt;-- 这是更改的部分</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><h5 id="提示词追加示例"><a href="#提示词追加示例" class="headerlink" title="提示词追加示例"></a>提示词追加示例</h5><p>提示词中包含交互样本的作用是为了帮助模型更好地理解用户的意图，从而更好地回答问题或执行任务。小样本提示模板是指使用一组少量的示例来指导模型处理新的输入。这些示例可以用来训练模型，以便模型可以更好地理解和回答类似的问题。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Q: 什么是宋书生？</span><br><span class="line">A: 宋书生是一个励志成为精通LLM的愣头青。</span><br><span class="line"></span><br><span class="line">Q: 什么是宋铁柱？</span><br><span class="line">A: 未知。</span><br><span class="line"></span><br><span class="line">Q: 什么是语言模型？</span><br><span class="line">A:</span><br></pre></td></tr></table></figure><p>告诉模型根据，Q是问题，A是答案，按这种格式进行问答交互。</p><p>下面讲解的就是Lanchain针对在提示词中插入少量交互样本提供的工具类。</p><h3 id="3-使用示例集"><a href="#3-使用示例集" class="headerlink" title="3. 使用示例集"></a>3. 使用示例集</h3><h5 id="创建示例集"><a href="#创建示例集" class="headerlink" title="创建示例集"></a>创建示例集</h5><p>下面定义一个examples示例数组，里面包含一组问答样例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.prompts.few_shot <span class="keyword">import</span> FewShotPromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain.prompts.prompt <span class="keyword">import</span> PromptTemplate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">examples = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;question&quot;</span>: <span class="string">&quot;珠穆朗玛峰和富士山哪一座山的首次登顶时间更早？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;answer&quot;</span>:</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            这里需要跟进问题吗：是的。</span></span><br><span class="line"><span class="string">            跟进：珠穆朗玛峰的首次登顶时间是什么时候？</span></span><br><span class="line"><span class="string">            中间答案：珠穆朗玛峰于1953年5月29日首次被登顶。</span></span><br><span class="line"><span class="string">            跟进：富士山的首次登顶时间是什么时候？</span></span><br><span class="line"><span class="string">            中间答案：富士山在公元663年已有朝圣者登顶记录。</span></span><br><span class="line"><span class="string">            所以最终答案是：富士山</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;question&quot;</span>: <span class="string">&quot;特斯拉和SpaceX的CEO是否曾就读于同一所大学？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;answer&quot;</span>:</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            这里需要跟进问题吗：是的。</span></span><br><span class="line"><span class="string">            跟进：特斯拉的CEO是谁？</span></span><br><span class="line"><span class="string">            中间答案：特斯拉的CEO是Elon Musk。</span></span><br><span class="line"><span class="string">            跟进：Elon Musk曾就读于哪所大学？</span></span><br><span class="line"><span class="string">            中间答案：他曾在宾夕法尼亚大学学习。</span></span><br><span class="line"><span class="string">            跟进：SpaceX的CEO是谁？</span></span><br><span class="line"><span class="string">            中间答案：SpaceX的CEO也是Elon Musk。</span></span><br><span class="line"><span class="string">            所以最终答案是：是</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;question&quot;</span>: <span class="string">&quot;《哈利波特》系列和《魔戒》系列的作者是否都出生于英国？&quot;</span>,</span><br><span class="line">        <span class="string">&quot;answer&quot;</span>:</span><br><span class="line">            <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            这里需要跟进问题吗：是的。</span></span><br><span class="line"><span class="string">            跟进：《哈利波特》的作者是谁？</span></span><br><span class="line"><span class="string">            中间答案：J.K. Rowling。</span></span><br><span class="line"><span class="string">            跟进：J.K. Rowling的出生地是哪里？</span></span><br><span class="line"><span class="string">            中间答案：她出生于英国格洛斯特郡。</span></span><br><span class="line"><span class="string">            跟进：《魔戒》的作者是谁？</span></span><br><span class="line"><span class="string">            中间答案：J.R.R. Tolkien。</span></span><br><span class="line"><span class="string">            跟进：J.R.R. Tolkien的出生地是哪里？</span></span><br><span class="line"><span class="string">            中间答案：他出生于南非奥兰治自由邦。</span></span><br><span class="line"><span class="string">            所以最终答案是：不是</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="创建小样本示例的格式化程序"><a href="#创建小样本示例的格式化程序" class="headerlink" title="创建小样本示例的格式化程序"></a>创建小样本示例的格式化程序</h5><p>通过PromptTemplate对象，简单的在提示词模板中插入样例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">example_prompt = PromptTemplate(input_variables=[<span class="string">&quot;question&quot;</span>, <span class="string">&quot;answer&quot;</span>], template=<span class="string">&quot;问题：&#123;question&#125;\\n&#123;answer&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取examples示例集合的一个示例的内容，用于格式化模板内容</span></span><br><span class="line"><span class="built_in">print</span>(example_prompt.<span class="built_in">format</span>(**examples[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><p>返回：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">问题：珠穆朗玛峰和富士山哪一座山的首次登顶时间更早？\n</span><br><span class="line">            这里需要跟进问题吗：是的。</span><br><span class="line">            跟进：珠穆朗玛峰的首次登顶时间是什么时候？</span><br><span class="line">            中间答案：珠穆朗玛峰于<span class="number">1953</span>年<span class="number">5</span>月<span class="number">29</span>日首次被登顶。</span><br><span class="line">            跟进：富士山的首次登顶时间是什么时候？</span><br><span class="line">            中间答案：富士山在公元<span class="number">663</span>年已有朝圣者登顶记录。</span><br><span class="line">            所以最终答案是：富士山</span><br></pre></td></tr></table></figure><h5 id="将示例和格式化程序提供给FewShotPromptTemplate"><a href="#将示例和格式化程序提供给FewShotPromptTemplate" class="headerlink" title="将示例和格式化程序提供给FewShotPromptTemplate"></a>将示例和格式化程序提供给FewShotPromptTemplate</h5><p>通过<code>FewShotPromptTemplate</code>对象，批量插入示例内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#接收examples示例数组参数，通过example_prompt提示词模板批量渲染示例内容</span></span><br><span class="line"><span class="comment">#suffix和input_variables参数用于在提示词模板最后追加内容， input_variables用于定义suffix中包含的模板参数</span></span><br><span class="line">prompt = FewShotPromptTemplate(</span><br><span class="line">    examples=examples,</span><br><span class="line">    example_prompt=example_prompt,</span><br><span class="line">    suffix=<span class="string">&quot;问题：&#123;input&#125;&quot;</span>,</span><br><span class="line">    input_variables=[<span class="string">&quot;input&quot;</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(prompt.<span class="built_in">format</span>(<span class="built_in">input</span>=<span class="string">&quot;《魔戒》的作者是谁？&quot;</span>))</span><br></pre></td></tr></table></figure><p>返回：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">问题：珠穆朗玛峰和富士山哪一座山的首次登顶时间更早？\n</span><br><span class="line">            这里需要跟进问题吗：是的。</span><br><span class="line">            跟进：珠穆朗玛峰的首次登顶时间是什么时候？</span><br><span class="line">            中间答案：珠穆朗玛峰于<span class="number">1953</span>年<span class="number">5</span>月<span class="number">29</span>日首次被登顶。</span><br><span class="line">            跟进：富士山的首次登顶时间是什么时候？</span><br><span class="line">            中间答案：富士山在公元<span class="number">663</span>年已有朝圣者登顶记录。</span><br><span class="line">            所以最终答案是：富士山</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">问题：特斯拉和SpaceX的CEO是否曾就读于同一所大学？\n</span><br><span class="line">            这里需要跟进问题吗：是的。</span><br><span class="line">            跟进：特斯拉的CEO是谁？</span><br><span class="line">            中间答案：特斯拉的CEO是Elon Musk。</span><br><span class="line">            跟进：Elon Musk曾就读于哪所大学？</span><br><span class="line">            中间答案：他曾在宾夕法尼亚大学学习。</span><br><span class="line">            跟进：SpaceX的CEO是谁？</span><br><span class="line">            中间答案：SpaceX的CEO也是Elon Musk。</span><br><span class="line">            所以最终答案是：是</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">问题：《哈利波特》系列和《魔戒》系列的作者是否都出生于英国？\n</span><br><span class="line">            这里需要跟进问题吗：是的。</span><br><span class="line">            跟进：《哈利波特》的作者是谁？</span><br><span class="line">            中间答案：J.K. Rowling。</span><br><span class="line">            跟进：J.K. Rowling的出生地是哪里？</span><br><span class="line">            中间答案：她出生于英国格洛斯特郡。</span><br><span class="line">            跟进：《魔戒》的作者是谁？</span><br><span class="line">            中间答案：J.R.R. Tolkien。</span><br><span class="line">            跟进：J.R.R. Tolkien的出生地是哪里？</span><br><span class="line">            中间答案：他出生于南非奥兰治自由邦。</span><br><span class="line">            所以最终答案是：不是</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">问题：《魔戒》的作者是谁？</span><br></pre></td></tr></table></figure><h3 id="4-使用示例选择器"><a href="#4-使用示例选择器" class="headerlink" title="4. 使用示例选择器"></a>4. 使用示例选择器</h3><h5 id="将示例提供给ExampleSelector"><a href="#将示例提供给ExampleSelector" class="headerlink" title="将示例提供给ExampleSelector"></a>将示例提供给ExampleSelector</h5><p>这里重用前一部分中的示例集和提示词模板(prompt template)。但是，不会将示例直接提供给<code>FewShotPromptTemplate</code>对象，把全部示例插入到提示词中，而是将它们提供给一个<code>ExampleSelector</code>对象，插入部分示例。</p><p>这里我们使用SemanticSimilarityExampleSelector类。该类根据与输入的相似性选择小样本示例。它使用嵌入模型计算输入和小样本示例之间的相似性，然后使用向量数据库执行相似搜索，获取跟输入相似的示例。</p><p><strong>提示：</strong>这里涉及向量计算、向量数据库，在AI领域这两个主要用于数据相似度搜索，例如：查询相似文章内容、相似的图片、视频等等，这里使用了google的向量数据库Chroma以及阿里的embedding模型text-embedding-v3，目前先做了解，会在后面教程中详细介绍。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.prompts.example_selector <span class="keyword">import</span> SemanticSimilarityExampleSelector</span><br><span class="line"><span class="keyword">from</span> langchain_community.vectorstores <span class="keyword">import</span> Chroma</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> DashScopeEmbeddings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用阿里的embedding，使用语义相似性示例选择器</span></span><br><span class="line">example_selector = SemanticSimilarityExampleSelector.from_examples(</span><br><span class="line">    <span class="comment"># 这是可供选择的示例列表。</span></span><br><span class="line">    examples,</span><br><span class="line">    <span class="comment"># 这是用于生成嵌入的嵌入类，该嵌入用于衡量语义相似性。</span></span><br><span class="line">    DashScopeEmbeddings(</span><br><span class="line">        model=<span class="string">&quot;text-embedding-v3&quot;</span>,</span><br><span class="line">        <span class="comment"># other params...</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="comment"># 这是用于存储嵌入和执行相似性搜索的VectorStore类。</span></span><br><span class="line">    Chroma,</span><br><span class="line">    <span class="comment"># 这是要生成的示例数。</span></span><br><span class="line">    k=<span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择与输入最相似的示例。</span></span><br><span class="line">question = <span class="string">&quot;《哈利波特》的作者是哪个国家的?&quot;</span></span><br><span class="line">selected_examples = example_selector.select_examples(&#123;<span class="string">&quot;question&quot;</span>: question&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最相似的示例：<span class="subst">&#123;question&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> example <span class="keyword">in</span> selected_examples:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> example.items():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;k&#125;</span>：<span class="subst">&#123;v&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里匹配了跟问题相似的例子，下面是返回：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">最相似的示例：《哈利波特》的作者是哪个国家的?</span><br><span class="line">\n</span><br><span class="line">answer：</span><br><span class="line">            这里需要跟进问题吗：是的。</span><br><span class="line">            跟进：《哈利波特》的作者是谁？</span><br><span class="line">            中间答案：J.K. Rowling。</span><br><span class="line">            跟进：J.K. Rowling的出生地是哪里？</span><br><span class="line">            中间答案：她出生于英国格洛斯特郡。</span><br><span class="line">            跟进：《魔戒》的作者是谁？</span><br><span class="line">            中间答案：J.R.R. Tolkien。</span><br><span class="line">            跟进：J.R.R. Tolkien的出生地是哪里？</span><br><span class="line">            中间答案：他出生于南非奥兰治自由邦。</span><br><span class="line">            所以最终答案是：不是</span><br><span class="line">            </span><br><span class="line">question：《哈利波特》系列和《魔戒》系列的作者是否都出生于英国？</span><br></pre></td></tr></table></figure><h5 id="将示例选择器提供给FewShotPromptTemplate"><a href="#将示例选择器提供给FewShotPromptTemplate" class="headerlink" title="将示例选择器提供给FewShotPromptTemplate"></a>将示例选择器提供给FewShotPromptTemplate</h5><p>最后，创建一个<code>FewShotPromptTemplate</code>对象。根据前面的example_selector示例选择器，选择一个跟问题相似的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择与输入最相似的示例。</span></span><br><span class="line">question = <span class="string">&quot;珠穆朗玛峰的首次登山时间？&quot;</span></span><br><span class="line">selected_examples = example_selector.select_examples(&#123;<span class="string">&quot;question&quot;</span>: question&#125;)</span><br><span class="line">example_prompt = PromptTemplate(input_variables=[<span class="string">&quot;question&quot;</span>, <span class="string">&quot;answer&quot;</span>], template=<span class="string">&quot;问题：&#123;question&#125;\\n&#123;answer&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">prompt = FewShotPromptTemplate(</span><br><span class="line">    example_selector=example_selector,</span><br><span class="line">    example_prompt=example_prompt,</span><br><span class="line">    suffix=<span class="string">&quot;问题：&#123;input&#125;&quot;</span>,</span><br><span class="line">    input_variables=[<span class="string">&quot;input&quot;</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(prompt.<span class="built_in">format</span>(<span class="built_in">input</span>=<span class="string">&quot;珠穆朗玛峰的首次登山时间？&quot;</span>))</span><br></pre></td></tr></table></figure><p>返回：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">问题：珠穆朗玛峰和富士山哪一座山的首次登顶时间更早？\n</span><br><span class="line">            这里需要跟进问题吗：是的。</span><br><span class="line">            跟进：珠穆朗玛峰的首次登顶时间是什么时候？</span><br><span class="line">            中间答案：珠穆朗玛峰于<span class="number">1953</span>年<span class="number">5</span>月<span class="number">29</span>日首次被登顶。</span><br><span class="line">            跟进：富士山的首次登顶时间是什么时候？</span><br><span class="line">            中间答案：富士山在公元<span class="number">663</span>年已有朝圣者登顶记录。</span><br><span class="line">            所以最终答案是：富士山</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">问题：珠穆朗玛峰的首次登山时间？</span><br></pre></td></tr></table></figure><h2 id="三、LangChain工作流编排"><a href="#三、LangChain工作流编排" class="headerlink" title="三、LangChain工作流编排"></a>三、LangChain工作流编排</h2><h3 id="1-LCEL介绍"><a href="#1-LCEL介绍" class="headerlink" title="1. LCEL介绍"></a>1. LCEL介绍</h3><p>LCEL(LangChain Expression Language) 是一种强大的工作流编排工具，可以从基本组件构建复杂任务链条(chain)，并支持诸如流式处理、并行处理和日志记录等开箱即用的功能。</p><p> LCEL 从第一天起就被设计为<strong>支持将原型投入生产，无需更改代码</strong>，从最简单的“提示 + LLM”链到最复杂的链（我们已经看到有人成功地在生产中运行了包含数百步的 LCEL 链）。以下是你可能想要使用 LCEL 的一些原因的几个亮点：</p><ul><li><p><strong>一流的流式支持</strong>：当你使用 LCEL 构建链时，你将获得可能的最佳时间到第一个标记（直到输出的第一块内容出现所经过的时间）。对于某些链，这意味着我们直接从 LLM 流式传输标记到流式输出解析器，你将以与 LLM 提供程序输出原始标记的速率相同的速度获得解析的增量输出块。 </p></li><li><p><strong>异步支持</strong>：使用 LCEL 构建的任何链都可以使用同步 API（例如，在你的 Jupyter 笔记本中进行原型设计）以及异步 API（例如，在 <a href="http://www.aidoczh.com/langchain/v0.2/docs/langserve/">LangServe</a> 服务器中）进行调用。这使得可以在原型和生产中使用相同的代码，具有出色的性能，并且能够在同一服务器中处理许多并发请求。 </p></li><li><p><strong>优化的并行执行</strong>：每当你的 LCEL 链具有可以并行执行的步骤时（例如，如果你从多个检索器中获取文档），我们会自动执行，无论是在同步接口还是异步接口中，以获得可能的最小延迟。 </p></li><li><p><strong>重试和回退：</strong> 为 LCEL 链的任何部分配置重试和回退。这是使你的链在规模上更可靠的好方法。我们目前正在努力为重试&#x2F;回退添加流式支持，这样你就可以获得额外的可靠性而无需任何延迟成本。 </p></li><li><p><strong>访问中间结果：</strong> 对于更复杂的链，访问中间步骤的结果通常非常有用，即使在生成最终输出之前。这可以用于让最终用户知道正在发生的事情，甚至只是用于调试你的链。你可以流式传输中间结果，并且在每个 <a href="http://www.aidoczh.com/langchain/v0.2/docs/langserve/">LangServe</a> 服务器上都可以使用。 </p></li><li><p><strong>输入和输出模式：</strong> 输入和输出模式为每个 LCEL 链提供了从链的结构推断出的 Pydantic 和 JSONSchema 模式。这可用于验证输入和输出，并且是 LangServe 的一个组成部分。</p></li></ul><h3 id="2-Runable-interface介绍"><a href="#2-Runable-interface介绍" class="headerlink" title="2. Runable interface介绍"></a>2. Runable interface介绍</h3><p>为了尽可能简化创建自定义链的过程，许多 LangChain 组件都实现了 Runnable 协议，包括聊天模型、LLMs、输出解析器、检索器、提示模板等等。此外，还有一些有用的基本组件可用于处理可运行对象，你可以在下面了解更多。 这是一个标准接口，可以轻松定义自定义链，并以标准方式调用它们。 标准接口包括：</p><ul><li><p><a href="http://www.aidoczh.com/langchain/v0.2/docs/concepts/#stream">stream</a>: 返回响应的数据块</p></li><li><p><a href="http://www.aidoczh.com/langchain/v0.2/docs/concepts/#invoke">invoke</a>: 对输入调用链</p></li><li><p><a href="http://www.aidoczh.com/langchain/v0.2/docs/concepts/#batch">batch</a>: 对输入列表调用链</p></li></ul><p>这些还有相应的异步方法，应该与 <a href="https://docs.python.org/3/library/asyncio.html">asyncio</a> 一起使用 await 语法以实现并发：</p><ul><li><p>astream: 异步返回响应的数据块</p></li><li><p>ainvoke: 异步对输入调用链</p></li><li><p>abatch: 异步对输入列表调用链</p></li><li><p>astream_log: 异步返回中间步骤，以及最终响应</p></li><li><p>astream_events: beta 流式传输链中发生的事件（在 langchain-core 0.1.14 中引入）</p></li></ul><p><strong>输入类型</strong> 和 <strong>输出类型</strong> 因组件而异： </p><table><thead><tr><th>组件</th><th>输入类型</th><th>输出类型</th></tr></thead><tbody><tr><td>提示</td><td>字典</td><td>提示值</td></tr><tr><td>聊天模型</td><td>单个字符串、聊天消息列表或提示值</td><td>聊天消息</td></tr><tr><td>LLM</td><td>单个字符串、聊天消息列表或提示值</td><td>字符串</td></tr><tr><td>输出解析器</td><td>LLM 或聊天模型的输出</td><td>取决于解析器</td></tr><tr><td>检索器</td><td>单个字符串</td><td>文档列表</td></tr><tr><td>工具</td><td>单个字符串或字典，取决于工具</td><td>取决于工具</td></tr></tbody></table><p>所有可运行对象都公开输入和输出 模式 以检查输入和输出：</p><ul><li><p><strong>input_schema:</strong> 从可运行对象结构自动生成的输入 Pydantic 模型</p></li><li><p><strong>output_schema:</strong> 从可运行对象结构自动生成的输出 Pydantic 模型</p></li></ul><p>流式运行使基于 LLM 的应用程序对最终用户具有响应性至关重要。 重要的 LangChain 模块，如<a href="http://www.aidoczh.com/langchain/v0.2/docs/concepts/#chat-models">聊天模型</a>、<a href="http://www.aidoczh.com/langchain/v0.2/docs/concepts/#output-parsers">输出解析器</a>、<a href="http://www.aidoczh.com/langchain/v0.2/docs/concepts/#prompt-templates">提示模板</a>、<a href="http://www.aidoczh.com/langchain/v0.2/docs/concepts/#retrievers">检索器</a>和<a href="http://www.aidoczh.com/langchain/v0.2/docs/concepts/#agents">代理</a>都实现了 LangChain <a href="http://www.aidoczh.com/langchain/v0.2/docs/concepts/#interface">Runnable 接口</a>。 该接口提供了两种通用的流式内容方法：</p><ol><li><p>同步 <code>stream</code> 和异步 <code>astream</code>：流式传输链中的最终输出的默认实现。</p></li><li><p>异步 <code>astream_events</code> 和异步 astream_log：这些方法提供了一种从链中流式传输中间步骤和最终输出的方式。 接下来我们将学习这两种方法，并尝试理解如何使用它们。</p></li></ol><h3 id="3-Stream-流"><a href="#3-Stream-流" class="headerlink" title="3. Stream(流)"></a>3. Stream(流)</h3><p>所有 Runnable 对象都实现了一个名为 stream 的同步方法和一个名为 astream 的异步变体。 这些方法旨在以块的形式流式传输最终输出，尽快返回每个块。 只有在程序中的所有步骤都知道如何处理输入流时，才能进行流式传输；即逐个处理输入块，并产生相应的输出块。 这种处理的复杂性可以有所不同，从简单的任务，如发出 LLM 生成的令牌，到更具挑战性的任务，如在整个 JSON 完成之前流式传输 JSON 结果的部分。 让我们从 LLM 应用程序中最重要的组件开始探索——LLM 本身！</p><h5 id="LLM-和聊天模型"><a href="#LLM-和聊天模型" class="headerlink" title="LLM 和聊天模型"></a>LLM 和聊天模型</h5><p>大型语言模型及其聊天变体是基于 LLM 的应用程序的主要瓶颈。 大型语言模型可能需要几秒钟才能对查询生成完整的响应。这比应用程序对最终用户具有响应性的约 200-300 毫秒的阈值要慢得多。 使应用程序具有更高的响应性的关键策略是显示中间进度；即逐个令牌流式传输模型的输出。 我们将展示使用聊天模型进行流式传输的示例：</p><p>让我们从同步 stream API 开始：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">model = ChatOpenAI(</span><br><span class="line">    model=<span class="string">&#x27;deepseek-chat&#x27;</span>,</span><br><span class="line">    max_tokens=<span class="number">1024</span>,</span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.getenv(<span class="string">&quot;DEEPSEEK_BASE_URL&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">chunks = []</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> model.stream(<span class="string">&quot;宋词的前身是什么？&quot;</span>):</span><br><span class="line">    chunks.append(chunk)</span><br><span class="line">    <span class="built_in">print</span>(chunk.content, end=<span class="string">&quot;|&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者，如果你在异步环境中工作，可以考虑使用异步 <code>astream</code> API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">model = ChatOpenAI(</span><br><span class="line">    model=<span class="string">&#x27;deepseek-chat&#x27;</span>,</span><br><span class="line">    max_tokens=<span class="number">1024</span>,</span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.getenv(<span class="string">&quot;DEEPSEEK_BASE_URL&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步流处理</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">async_stream</span>():</span><br><span class="line">    chunks = []</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">for</span> chunk <span class="keyword">in</span> model.astream(<span class="string">&quot;宋词的前身是什么？&quot;</span>):</span><br><span class="line">        chunks.append(chunk)</span><br><span class="line">        <span class="comment"># 判断chunks长度为1的时候，打印chunks[0]</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(chunks) == <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(chunks[<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span>(chunk.content, end=<span class="string">&quot;|&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 运行异步流处理</span></span><br><span class="line">asyncio.run(async_stream())</span><br></pre></td></tr></table></figure><p>让我们检查其中一个块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chunks[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">content=<span class="string">&#x27;宋&#x27;</span> additional_kwargs=&#123;&#125; response_metadata=&#123;&#125; <span class="built_in">id</span>=<span class="string">&#x27;run-4fb547d7-43ea-4c1d-88a4-f81c763e8f3e&#x27;</span></span><br></pre></td></tr></table></figure><p>我们得到了一个称为 AIMessageChunk 的东西。该块表示 AIMessage 的一部分。 消息块是可叠加的——可以简单地将它们相加以获得到目前为止的响应状态！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chunks[<span class="number">0</span>] + chunks[<span class="number">1</span>] + chunks[<span class="number">2</span>] + chunks[<span class="number">3</span>] + chunks[<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">content=<span class="string">&#x27;宋词的前身&#x27;</span> additional_kwargs=&#123;&#125; response_metadata=&#123;&#125; <span class="built_in">id</span>=<span class="string">&#x27;run-c1bfd630-ec2e-4bf8-8cb2-79287cdbdc59&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="Chain-链"><a href="#Chain-链" class="headerlink" title="Chain(链)"></a>Chain(链)</h5><p>几乎所有的 LLM 应用程序都涉及不止一步的操作，而不仅仅是调用语言模型。 让我们使用 LangChain 表达式语言 (LCEL) 构建一个简单的链，该链结合了一个提示、模型和解析器，并验证流式传输是否正常工作。 我们将使用 <a href="https://api.python.langchain.com/en/latest/output_parsers/langchain_core.output_parsers.string.StrOutputParser.html">StrOutputParser</a> 来解析模型的输出。这是一个简单的解析器，从 <code>AIMessageChunk</code> 中提取 <code>content</code> 字段，给出模型返回的 token。</p><p>LCEL 是一种声明式的方式，通过将不同的 LangChain 原语链接在一起来指定一个“程序”。使用 LCEL 创建的链可以自动实现 <code>stream</code> 和 astream，从而实现对最终输出的流式传输。事实上，使用 LCEL 创建的链实现了整个标准 Runnable 接口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">prompt = ChatPromptTemplate.from_template(<span class="string">&quot;给我讲一个关于&#123;topic&#125;的笑话&quot;</span>)</span><br><span class="line">model = ChatOpenAI(</span><br><span class="line">    model=<span class="string">&#x27;deepseek-chat&#x27;</span>,</span><br><span class="line">    max_tokens=<span class="number">1024</span>,</span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.getenv(<span class="string">&quot;DEEPSEEK_BASE_URL&quot;</span>)</span><br><span class="line">)</span><br><span class="line">parser = StrOutputParser()</span><br><span class="line">chain = prompt | model | parser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">async_stream</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">for</span> chunk <span class="keyword">in</span> chain.astream(&#123;<span class="string">&quot;topic&quot;</span>: <span class="string">&quot;工作&quot;</span>&#125;):</span><br><span class="line">        <span class="built_in">print</span>(chunk, end=<span class="string">&quot;|&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行异步流处理</span></span><br><span class="line">asyncio.run(async_stream())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">|好的|！|这是一个|关于|工作的|经典|笑话|：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">|---</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">|**|老板|**|：|我们|公司|崇尚|平等|，|在这里|没有|等级|观念|！|  </span></span><br><span class="line"><span class="string">|**|新|员工|**|：|太好了|！|那|我可以|直接|叫|你|名字|吗|？|  </span></span><br><span class="line"><span class="string">|**|老板|**|：|当然|可以|。|  </span></span><br><span class="line"><span class="string">|**|新|员工|**|：|好的|，|老王|。|  </span></span><br><span class="line"><span class="string">|**|老板|**|：|……|叫我|王|总|。|  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">|（|冷笑|话|Bonus|：|平等|的前提|是|“|总|”|得|有人|加班|。）|  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">|---|</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">|希望|让你|会|心|一笑|～| 😄||</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>请注意，即使我们在上面的链条末尾使用了<code>parser</code>，我们仍然可以获得流式输出。parser会对每个流式块进行操作。许多LCEL基元也支持这种转换式的流式传递，这在构建应用程序时非常方便。</p><p>自定义函数可以被设计为返回生成器，这样就能够操作流。</p><p>某些可运行实体，如提示模板和聊天模型，无法处理单个块，而是聚合所有先前的步骤。这些可运行实体可以中断流处理。</p><p>LangChain表达语言允许你将链的构建与使用模式（例如同步&#x2F;异步、批处理&#x2F;流式等）分开。如果这与你构建的内容无关，你也可以依赖于标准的命令式编程方法，通过在每个组件上调用invoke、batch或stream，将结果分配给变量，然后根据需要在下游使用它们。</p><p><strong>使用输入流</strong></p><p>如果你想要在输出生成时从中流式传输JSON，该怎么办呢？</p><p>如果你依赖<code>json.loads</code>来解析部分JSON，那么解析将失败，因为部分JSON不会是有效的JSON。</p><p>你可能会束手无策，声称无法流式传输JSON。</p><p>事实证明，有一种方法可以做到这一点——解析器需要在<strong>输入流</strong>上操作，并尝试将部分JSON“自动完成”为有效状态。</p><p>让我们看看这样一个解析器的运行，以了解这意味着什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">model = ChatOpenAI(</span><br><span class="line">    model=<span class="string">&#x27;deepseek-chat&#x27;</span>,</span><br><span class="line">    max_tokens=<span class="number">1024</span>,</span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.getenv(<span class="string">&quot;DEEPSEEK_BASE_URL&quot;</span>)</span><br><span class="line">)</span><br><span class="line">chain = (</span><br><span class="line">        model | JsonOutputParser()</span><br><span class="line">    <span class="comment"># 由于Langchain旧版本中的一个错误，JsonOutputParser未能从某些模型中流式传输结果</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">async_stream</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">for</span> text <span class="keyword">in</span> chain.astream(</span><br><span class="line">            <span class="string">&quot;以JSON 格式输出中国、美国和印度的国家及其人口列表。&quot;</span></span><br><span class="line">            <span class="string">&#x27;使用一个带有“countries”外部键的字典，其中包含国家列表。&#x27;</span></span><br><span class="line">            <span class="string">&quot;每个国家都应该有键`name`和`population`&quot;</span></span><br><span class="line">    ):</span><br><span class="line">        <span class="built_in">print</span>(text, flush=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行异步流处理</span></span><br><span class="line">asyncio.run(async_stream())</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: []&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: [&#123;&#125;]&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: [&#123;&#x27;name&#x27;: &#x27;&#x27;&#125;]&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: [&#123;&#x27;name&#x27;: &#x27;中国&#x27;&#125;]&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: [&#123;&#x27;name&#x27;: &#x27;中国&#x27;, &#x27;population&#x27;: 141&#125;]&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: [&#123;&#x27;name&#x27;: &#x27;中国&#x27;, &#x27;population&#x27;: 141175&#125;]&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: [&#123;&#x27;name&#x27;: &#x27;中国&#x27;, &#x27;population&#x27;: 141175000&#125;]&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: [&#123;&#x27;name&#x27;: &#x27;中国&#x27;, &#x27;population&#x27;: 1411750000&#125;]&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: [&#123;&#x27;name&#x27;: &#x27;中国&#x27;, &#x27;population&#x27;: 1411750000&#125;, &#123;&#125;]&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: [&#123;&#x27;name&#x27;: &#x27;中国&#x27;, &#x27;population&#x27;: 1411750000&#125;, &#123;&#x27;name&#x27;: &#x27;&#x27;&#125;]&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: [&#123;&#x27;name&#x27;: &#x27;中国&#x27;, &#x27;population&#x27;: 1411750000&#125;, &#123;&#x27;name&#x27;: &#x27;美国&#x27;&#125;]&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: [&#123;&#x27;name&#x27;: &#x27;中国&#x27;, &#x27;population&#x27;: 1411750000&#125;, &#123;&#x27;name&#x27;: &#x27;美国&#x27;, &#x27;population&#x27;: 331&#125;]&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: [&#123;&#x27;name&#x27;: &#x27;中国&#x27;, &#x27;population&#x27;: 1411750000&#125;, &#123;&#x27;name&#x27;: &#x27;美国&#x27;, &#x27;population&#x27;: 331000&#125;]&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: [&#123;&#x27;name&#x27;: &#x27;中国&#x27;, &#x27;population&#x27;: 1411750000&#125;, &#123;&#x27;name&#x27;: &#x27;美国&#x27;, &#x27;population&#x27;: 331000000&#125;]&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: [&#123;&#x27;name&#x27;: &#x27;中国&#x27;, &#x27;population&#x27;: 1411750000&#125;, &#123;&#x27;name&#x27;: &#x27;美国&#x27;, &#x27;population&#x27;: 331000000&#125;, &#123;&#125;]&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: [&#123;&#x27;name&#x27;: &#x27;中国&#x27;, &#x27;population&#x27;: 1411750000&#125;, &#123;&#x27;name&#x27;: &#x27;美国&#x27;, &#x27;population&#x27;: 331000000&#125;, &#123;&#x27;name&#x27;: &#x27;&#x27;&#125;]&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: [&#123;&#x27;name&#x27;: &#x27;中国&#x27;, &#x27;population&#x27;: 1411750000&#125;, &#123;&#x27;name&#x27;: &#x27;美国&#x27;, &#x27;population&#x27;: 331000000&#125;, &#123;&#x27;name&#x27;: &#x27;印度&#x27;&#125;]&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: [&#123;&#x27;name&#x27;: &#x27;中国&#x27;, &#x27;population&#x27;: 1411750000&#125;, &#123;&#x27;name&#x27;: &#x27;美国&#x27;, &#x27;population&#x27;: 331000000&#125;, &#123;&#x27;name&#x27;: &#x27;印度&#x27;, &#x27;population&#x27;: 138&#125;]&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: [&#123;&#x27;name&#x27;: &#x27;中国&#x27;, &#x27;population&#x27;: 1411750000&#125;, &#123;&#x27;name&#x27;: &#x27;美国&#x27;, &#x27;population&#x27;: 331000000&#125;, &#123;&#x27;name&#x27;: &#x27;印度&#x27;, &#x27;population&#x27;: 138000&#125;]&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: [&#123;&#x27;name&#x27;: &#x27;中国&#x27;, &#x27;population&#x27;: 1411750000&#125;, &#123;&#x27;name&#x27;: &#x27;美国&#x27;, &#x27;population&#x27;: 331000000&#125;, &#123;&#x27;name&#x27;: &#x27;印度&#x27;, &#x27;population&#x27;: 138000000&#125;]&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;countries&#x27;: [&#123;&#x27;name&#x27;: &#x27;中国&#x27;, &#x27;population&#x27;: 1411750000&#125;, &#123;&#x27;name&#x27;: &#x27;美国&#x27;, &#x27;population&#x27;: 331000000&#125;, &#123;&#x27;name&#x27;: &#x27;印度&#x27;, &#x27;population&#x27;: 1380000000&#125;]&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-Stream-events-事件流"><a href="#4-Stream-events-事件流" class="headerlink" title="4. Stream events(事件流)"></a>4. Stream events(事件流)</h3><p>现在我们已经了解了<code>stream</code>和astream的工作原理，让我们进入事件流的世界。🏞️</p><p>事件流是一个beta API。这个API可能会根据反馈略微更改。</p><p>本指南演示了<code>V2</code> API，并且需要 langchain-core &gt;&#x3D; 0.2。对于与旧版本 LangChain 兼容的V1 API，请参阅<a href="https://python.langchain.com/v0.1/docs/expression_language/streaming/#using-stream-events">这里</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> langchain_core</span><br><span class="line">langchain_core.__version__</span><br></pre></td></tr></table></figure><p>为了使<code>astream_events</code> API正常工作：</p><ul><li><p>在代码中尽可能使用<code>async</code>（例如，异步工具等）</p></li><li><p>如果定义自定义函数&#x2F;可运行项，请传播回调</p></li><li><p>在没有 LCEL 的情况下使用可运行项时，请确保在LLMs上调用.astream()而不是.ainvoke以强制LLM流式传输令牌</p></li></ul><h5 id="事件参考"><a href="#事件参考" class="headerlink" title="事件参考"></a><strong>事件参考</strong></h5><p>下面是一个参考表，显示各种可运行对象可能发出的一些事件。</p><p>当流式传输正确实现时，对于可运行项的输入直到输入流完全消耗后才会知道。这意味着inputs通常仅包括end事件，而不包括<code>start</code>事件。</p><table><thead><tr><th>事件</th><th>名称</th><th>块</th><th>输入</th><th>输出</th></tr></thead><tbody><tr><td>on_chat_model_start</td><td>[模型名称]</td><td></td><td>{“messages”: [[SystemMessage, HumanMessage]]}</td><td></td></tr><tr><td>on_chat_model_end</td><td>[模型名称]</td><td></td><td>{“messages”: [[SystemMessage, HumanMessage]]}</td><td>AIMessageChunk(content&#x3D;”hello world”)</td></tr><tr><td>on_llm_start</td><td>[模型名称]</td><td></td><td>{‘input’: ‘hello’}</td><td></td></tr><tr><td>on_llm_stream</td><td>[模型名称]</td><td>‘Hello’</td><td></td><td></td></tr><tr><td>on_llm_end</td><td>[模型名称]</td><td></td><td>‘Hello human!’</td><td></td></tr><tr><td>on_chain_start</td><td>format_docs</td><td></td><td></td><td></td></tr><tr><td>on_chain_stream</td><td>format_docs</td><td>“hello world!, goodbye world!”</td><td></td><td></td></tr><tr><td>on_chain_end</td><td>format_docs</td><td></td><td>[Document(…)]</td><td>“hello world!, goodbye world!”</td></tr><tr><td>on_tool_start</td><td>some_tool</td><td></td><td>{“x”: 1, “y”: “2”}</td><td></td></tr><tr><td>on_tool_end</td><td>some_tool</td><td></td><td></td><td>{“x”: 1, “y”: “2”}</td></tr><tr><td>on_retriever_start</td><td>[检索器名称]</td><td></td><td>{“query”: “hello”}</td><td></td></tr><tr><td>on_retriever_end</td><td>[检索器名称]</td><td></td><td>{“query”: “hello”}</td><td>[Document(…), ..]</td></tr><tr><td>on_prompt_start</td><td>[模板名称]</td><td></td><td>{“question”: “hello”}</td><td></td></tr><tr><td>on_prompt_end</td><td>[模板名称]</td><td></td><td>{“question”: “hello”}</td><td>ChatPromptValue(messages: [SystemMessage, …])</td></tr></tbody></table><h5 id="聊天模型"><a href="#聊天模型" class="headerlink" title="聊天模型"></a>聊天模型</h5><p>让我们首先看一下聊天模型产生的事件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">model = ChatOpenAI(</span><br><span class="line">    model=<span class="string">&#x27;deepseek-chat&#x27;</span>,</span><br><span class="line">    max_tokens=<span class="number">1024</span>,</span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.getenv(<span class="string">&quot;DEEPSEEK_BASE_URL&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步流处理</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">async_stream</span>():</span><br><span class="line">    events = []</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">for</span> event <span class="keyword">in</span> model.astream_events(<span class="string">&quot;hello&quot;</span>, version=<span class="string">&quot;v2&quot;</span>):</span><br><span class="line">        events.append(event)</span><br><span class="line">    <span class="built_in">print</span>(events)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行异步流处理</span></span><br><span class="line">asyncio.run(async_stream())</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&#123;&#x27;event&#x27;: &#x27;on_chat_model_start&#x27;, &#x27;data&#x27;: &#123;&#x27;input&#x27;: &#x27;hello&#x27;&#125;, &#x27;name&#x27;: &#x27;ChatOpenAI&#x27;, &#x27;tags&#x27;: [], &#x27;run_id&#x27;: &#x27;d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;, &#x27;metadata&#x27;: &#123;&#x27;ls_provider&#x27;: &#x27;openai&#x27;, &#x27;ls_model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;ls_model_type&#x27;: &#x27;chat&#x27;, &#x27;ls_temperature&#x27;: None, &#x27;ls_max_tokens&#x27;: 1024&#125;, &#x27;parent_ids&#x27;: []&#125;, &#123;&#x27;event&#x27;: &#x27;on_chat_model_stream&#x27;, &#x27;run_id&#x27;: &#x27;d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;, &#x27;name&#x27;: &#x27;ChatOpenAI&#x27;, &#x27;tags&#x27;: [], &#x27;metadata&#x27;: &#123;&#x27;ls_provider&#x27;: &#x27;openai&#x27;, &#x27;ls_model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;ls_model_type&#x27;: &#x27;chat&#x27;, &#x27;ls_temperature&#x27;: None, &#x27;ls_max_tokens&#x27;: 1024&#125;, &#x27;data&#x27;: &#123;&#x27;chunk&#x27;: AIMessageChunk(content=&#x27;&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, id=&#x27;run-d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;)&#125;, &#x27;parent_ids&#x27;: []&#125;, &#123;&#x27;event&#x27;: &#x27;on_chat_model_stream&#x27;, &#x27;run_id&#x27;: &#x27;d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;, &#x27;name&#x27;: &#x27;ChatOpenAI&#x27;, &#x27;tags&#x27;: [], &#x27;metadata&#x27;: &#123;&#x27;ls_provider&#x27;: &#x27;openai&#x27;, &#x27;ls_model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;ls_model_type&#x27;: &#x27;chat&#x27;, &#x27;ls_temperature&#x27;: None, &#x27;ls_max_tokens&#x27;: 1024&#125;, &#x27;data&#x27;: &#123;&#x27;chunk&#x27;: AIMessageChunk(content=&#x27;Hello&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, id=&#x27;run-d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;)&#125;, &#x27;parent_ids&#x27;: []&#125;, &#123;&#x27;event&#x27;: &#x27;on_chat_model_stream&#x27;, &#x27;run_id&#x27;: &#x27;d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;, &#x27;name&#x27;: &#x27;ChatOpenAI&#x27;, &#x27;tags&#x27;: [], &#x27;metadata&#x27;: &#123;&#x27;ls_provider&#x27;: &#x27;openai&#x27;, &#x27;ls_model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;ls_model_type&#x27;: &#x27;chat&#x27;, &#x27;ls_temperature&#x27;: None, &#x27;ls_max_tokens&#x27;: 1024&#125;, &#x27;data&#x27;: &#123;&#x27;chunk&#x27;: AIMessageChunk(content=&#x27;!&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, id=&#x27;run-d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;)&#125;, &#x27;parent_ids&#x27;: []&#125;, &#123;&#x27;event&#x27;: &#x27;on_chat_model_stream&#x27;, &#x27;run_id&#x27;: &#x27;d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;, &#x27;name&#x27;: &#x27;ChatOpenAI&#x27;, &#x27;tags&#x27;: [], &#x27;metadata&#x27;: &#123;&#x27;ls_provider&#x27;: &#x27;openai&#x27;, &#x27;ls_model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;ls_model_type&#x27;: &#x27;chat&#x27;, &#x27;ls_temperature&#x27;: None, &#x27;ls_max_tokens&#x27;: 1024&#125;, &#x27;data&#x27;: &#123;&#x27;chunk&#x27;: AIMessageChunk(content=&#x27; 😊&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, id=&#x27;run-d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;)&#125;, &#x27;parent_ids&#x27;: []&#125;, &#123;&#x27;event&#x27;: &#x27;on_chat_model_stream&#x27;, &#x27;run_id&#x27;: &#x27;d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;, &#x27;name&#x27;: &#x27;ChatOpenAI&#x27;, &#x27;tags&#x27;: [], &#x27;metadata&#x27;: &#123;&#x27;ls_provider&#x27;: &#x27;openai&#x27;, &#x27;ls_model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;ls_model_type&#x27;: &#x27;chat&#x27;, &#x27;ls_temperature&#x27;: None, &#x27;ls_max_tokens&#x27;: 1024&#125;, &#x27;data&#x27;: &#123;&#x27;chunk&#x27;: AIMessageChunk(content=&#x27; How&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, id=&#x27;run-d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;)&#125;, &#x27;parent_ids&#x27;: []&#125;, &#123;&#x27;event&#x27;: &#x27;on_chat_model_stream&#x27;, &#x27;run_id&#x27;: &#x27;d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;, &#x27;name&#x27;: &#x27;ChatOpenAI&#x27;, &#x27;tags&#x27;: [], &#x27;metadata&#x27;: &#123;&#x27;ls_provider&#x27;: &#x27;openai&#x27;, &#x27;ls_model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;ls_model_type&#x27;: &#x27;chat&#x27;, &#x27;ls_temperature&#x27;: None, &#x27;ls_max_tokens&#x27;: 1024&#125;, &#x27;data&#x27;: &#123;&#x27;chunk&#x27;: AIMessageChunk(content=&#x27; can&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, id=&#x27;run-d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;)&#125;, &#x27;parent_ids&#x27;: []&#125;, &#123;&#x27;event&#x27;: &#x27;on_chat_model_stream&#x27;, &#x27;run_id&#x27;: &#x27;d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;, &#x27;name&#x27;: &#x27;ChatOpenAI&#x27;, &#x27;tags&#x27;: [], &#x27;metadata&#x27;: &#123;&#x27;ls_provider&#x27;: &#x27;openai&#x27;, &#x27;ls_model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;ls_model_type&#x27;: &#x27;chat&#x27;, &#x27;ls_temperature&#x27;: None, &#x27;ls_max_tokens&#x27;: 1024&#125;, &#x27;data&#x27;: &#123;&#x27;chunk&#x27;: AIMessageChunk(content=&#x27; I&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, id=&#x27;run-d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;)&#125;, &#x27;parent_ids&#x27;: []&#125;, &#123;&#x27;event&#x27;: &#x27;on_chat_model_stream&#x27;, &#x27;run_id&#x27;: &#x27;d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;, &#x27;name&#x27;: &#x27;ChatOpenAI&#x27;, &#x27;tags&#x27;: [], &#x27;metadata&#x27;: &#123;&#x27;ls_provider&#x27;: &#x27;openai&#x27;, &#x27;ls_model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;ls_model_type&#x27;: &#x27;chat&#x27;, &#x27;ls_temperature&#x27;: None, &#x27;ls_max_tokens&#x27;: 1024&#125;, &#x27;data&#x27;: &#123;&#x27;chunk&#x27;: AIMessageChunk(content=&#x27; assist&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, id=&#x27;run-d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;)&#125;, &#x27;parent_ids&#x27;: []&#125;, &#123;&#x27;event&#x27;: &#x27;on_chat_model_stream&#x27;, &#x27;run_id&#x27;: &#x27;d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;, &#x27;name&#x27;: &#x27;ChatOpenAI&#x27;, &#x27;tags&#x27;: [], &#x27;metadata&#x27;: &#123;&#x27;ls_provider&#x27;: &#x27;openai&#x27;, &#x27;ls_model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;ls_model_type&#x27;: &#x27;chat&#x27;, &#x27;ls_temperature&#x27;: None, &#x27;ls_max_tokens&#x27;: 1024&#125;, &#x27;data&#x27;: &#123;&#x27;chunk&#x27;: AIMessageChunk(content=&#x27; you&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, id=&#x27;run-d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;)&#125;, &#x27;parent_ids&#x27;: []&#125;, &#123;&#x27;event&#x27;: &#x27;on_chat_model_stream&#x27;, &#x27;run_id&#x27;: &#x27;d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;, &#x27;name&#x27;: &#x27;ChatOpenAI&#x27;, &#x27;tags&#x27;: [], &#x27;metadata&#x27;: &#123;&#x27;ls_provider&#x27;: &#x27;openai&#x27;, &#x27;ls_model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;ls_model_type&#x27;: &#x27;chat&#x27;, &#x27;ls_temperature&#x27;: None, &#x27;ls_max_tokens&#x27;: 1024&#125;, &#x27;data&#x27;: &#123;&#x27;chunk&#x27;: AIMessageChunk(content=&#x27; today&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, id=&#x27;run-d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;)&#125;, &#x27;parent_ids&#x27;: []&#125;, &#123;&#x27;event&#x27;: &#x27;on_chat_model_stream&#x27;, &#x27;run_id&#x27;: &#x27;d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;, &#x27;name&#x27;: &#x27;ChatOpenAI&#x27;, &#x27;tags&#x27;: [], &#x27;metadata&#x27;: &#123;&#x27;ls_provider&#x27;: &#x27;openai&#x27;, &#x27;ls_model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;ls_model_type&#x27;: &#x27;chat&#x27;, &#x27;ls_temperature&#x27;: None, &#x27;ls_max_tokens&#x27;: 1024&#125;, &#x27;data&#x27;: &#123;&#x27;chunk&#x27;: AIMessageChunk(content=&#x27;?&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, id=&#x27;run-d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;)&#125;, &#x27;parent_ids&#x27;: []&#125;, &#123;&#x27;event&#x27;: &#x27;on_chat_model_stream&#x27;, &#x27;run_id&#x27;: &#x27;d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;, &#x27;name&#x27;: &#x27;ChatOpenAI&#x27;, &#x27;tags&#x27;: [], &#x27;metadata&#x27;: &#123;&#x27;ls_provider&#x27;: &#x27;openai&#x27;, &#x27;ls_model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;ls_model_type&#x27;: &#x27;chat&#x27;, &#x27;ls_temperature&#x27;: None, &#x27;ls_max_tokens&#x27;: 1024&#125;, &#x27;data&#x27;: &#123;&#x27;chunk&#x27;: AIMessageChunk(content=&#x27;&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#x27;finish_reason&#x27;: &#x27;stop&#x27;, &#x27;model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;system_fingerprint&#x27;: &#x27;fp_3d5141a69a_prod0225&#x27;&#125;, id=&#x27;run-d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;, usage_metadata=&#123;&#x27;input_tokens&#x27;: 4, &#x27;output_tokens&#x27;: 11, &#x27;total_tokens&#x27;: 15, &#x27;input_token_details&#x27;: &#123;&#x27;cache_read&#x27;: 0&#125;, &#x27;output_token_details&#x27;: &#123;&#125;&#125;)&#125;, &#x27;parent_ids&#x27;: []&#125;, &#123;&#x27;event&#x27;: &#x27;on_chat_model_end&#x27;, &#x27;data&#x27;: &#123;&#x27;output&#x27;: AIMessageChunk(content=&#x27;Hello! 😊 How can I assist you today?&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#x27;finish_reason&#x27;: &#x27;stop&#x27;, &#x27;model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;system_fingerprint&#x27;: &#x27;fp_3d5141a69a_prod0225&#x27;&#125;, id=&#x27;run-d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;, usage_metadata=&#123;&#x27;input_tokens&#x27;: 4, &#x27;output_tokens&#x27;: 11, &#x27;total_tokens&#x27;: 15, &#x27;input_token_details&#x27;: &#123;&#x27;cache_read&#x27;: 0&#125;, &#x27;output_token_details&#x27;: &#123;&#125;&#125;)&#125;, &#x27;run_id&#x27;: &#x27;d106e0f1-7079-4e3f-a65a-822856c9a661&#x27;, &#x27;name&#x27;: &#x27;ChatOpenAI&#x27;, &#x27;tags&#x27;: [], &#x27;metadata&#x27;: &#123;&#x27;ls_provider&#x27;: &#x27;openai&#x27;, &#x27;ls_model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;ls_model_type&#x27;: &#x27;chat&#x27;, &#x27;ls_temperature&#x27;: None, &#x27;ls_max_tokens&#x27;: 1024&#125;, &#x27;parent_ids&#x27;: []&#125;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>嘿，API中那个有趣的<strong>version&#x3D;”v2”<strong>参数是什么意思？😾 这是一个</strong>beta API</strong>，我们几乎肯定会对其进行一些更改（事实上，我们已经做了！） 这个版本参数将允许我们最小化对你代码的破坏性更改。 简而言之，我们现在让你感到烦恼，这样以后就不必再烦恼了。 v2仅适用于 langchain-core&gt;&#x3D;0.2.0。</p><p>让我们看一下一些开始事件和一些结束事件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">events[:<span class="number">3</span>]</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&#123;&#x27;event&#x27;: &#x27;on_chat_model_start&#x27;, &#x27;data&#x27;: &#123;&#x27;input&#x27;: &#x27;hello&#x27;&#125;, &#x27;name&#x27;: &#x27;ChatOpenAI&#x27;, &#x27;tags&#x27;: [], &#x27;run_id&#x27;: &#x27;1d065854-4eb2-4034-bd68-b8c84c281e01&#x27;, &#x27;metadata&#x27;: &#123;&#x27;ls_provider&#x27;: &#x27;openai&#x27;, &#x27;ls_model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;ls_model_type&#x27;: &#x27;chat&#x27;, &#x27;ls_temperature&#x27;: None, &#x27;ls_max_tokens&#x27;: 1024&#125;, &#x27;parent_ids&#x27;: []&#125;, &#123;&#x27;event&#x27;: &#x27;on_chat_model_stream&#x27;, &#x27;run_id&#x27;: &#x27;1d065854-4eb2-4034-bd68-b8c84c281e01&#x27;, &#x27;name&#x27;: &#x27;ChatOpenAI&#x27;, &#x27;tags&#x27;: [], &#x27;metadata&#x27;: &#123;&#x27;ls_provider&#x27;: &#x27;openai&#x27;, &#x27;ls_model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;ls_model_type&#x27;: &#x27;chat&#x27;, &#x27;ls_temperature&#x27;: None, &#x27;ls_max_tokens&#x27;: 1024&#125;, &#x27;data&#x27;: &#123;&#x27;chunk&#x27;: AIMessageChunk(content=&#x27;&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, id=&#x27;run-1d065854-4eb2-4034-bd68-b8c84c281e01&#x27;)&#125;, &#x27;parent_ids&#x27;: []&#125;, &#123;&#x27;event&#x27;: &#x27;on_chat_model_stream&#x27;, &#x27;run_id&#x27;: &#x27;1d065854-4eb2-4034-bd68-b8c84c281e01&#x27;, &#x27;name&#x27;: &#x27;ChatOpenAI&#x27;, &#x27;tags&#x27;: [], &#x27;metadata&#x27;: &#123;&#x27;ls_provider&#x27;: &#x27;openai&#x27;, &#x27;ls_model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;ls_model_type&#x27;: &#x27;chat&#x27;, &#x27;ls_temperature&#x27;: None, &#x27;ls_max_tokens&#x27;: 1024&#125;, &#x27;data&#x27;: &#123;&#x27;chunk&#x27;: AIMessageChunk(content=&#x27;Hello&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, id=&#x27;run-1d065854-4eb2-4034-bd68-b8c84c281e01&#x27;)&#125;, &#x27;parent_ids&#x27;: []&#125;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">events[-<span class="number">2</span>:]</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&#123;&#x27;event&#x27;: &#x27;on_chat_model_stream&#x27;, &#x27;run_id&#x27;: &#x27;1d065854-4eb2-4034-bd68-b8c84c281e01&#x27;, &#x27;name&#x27;: &#x27;ChatOpenAI&#x27;, &#x27;tags&#x27;: [], &#x27;metadata&#x27;: &#123;&#x27;ls_provider&#x27;: &#x27;openai&#x27;, &#x27;ls_model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;ls_model_type&#x27;: &#x27;chat&#x27;, &#x27;ls_temperature&#x27;: None, &#x27;ls_max_tokens&#x27;: 1024&#125;, &#x27;data&#x27;: &#123;&#x27;chunk&#x27;: AIMessageChunk(content=&#x27;&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#x27;finish_reason&#x27;: &#x27;stop&#x27;, &#x27;model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;system_fingerprint&#x27;: &#x27;fp_3d5141a69a_prod0225&#x27;&#125;, id=&#x27;run-1d065854-4eb2-4034-bd68-b8c84c281e01&#x27;, usage_metadata=&#123;&#x27;input_tokens&#x27;: 4, &#x27;output_tokens&#x27;: 11, &#x27;total_tokens&#x27;: 15, &#x27;input_token_details&#x27;: &#123;&#x27;cache_read&#x27;: 0&#125;, &#x27;output_token_details&#x27;: &#123;&#125;&#125;)&#125;, &#x27;parent_ids&#x27;: []&#125;, &#123;&#x27;event&#x27;: &#x27;on_chat_model_end&#x27;, &#x27;data&#x27;: &#123;&#x27;output&#x27;: AIMessageChunk(content=&#x27;Hello! 😊 How can I assist you today?&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#x27;finish_reason&#x27;: &#x27;stop&#x27;, &#x27;model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;system_fingerprint&#x27;: &#x27;fp_3d5141a69a_prod0225&#x27;&#125;, id=&#x27;run-1d065854-4eb2-4034-bd68-b8c84c281e01&#x27;, usage_metadata=&#123;&#x27;input_tokens&#x27;: 4, &#x27;output_tokens&#x27;: 11, &#x27;total_tokens&#x27;: 15, &#x27;input_token_details&#x27;: &#123;&#x27;cache_read&#x27;: 0&#125;, &#x27;output_token_details&#x27;: &#123;&#125;&#125;)&#125;, &#x27;run_id&#x27;: &#x27;1d065854-4eb2-4034-bd68-b8c84c281e01&#x27;, &#x27;name&#x27;: &#x27;ChatOpenAI&#x27;, &#x27;tags&#x27;: [], &#x27;metadata&#x27;: &#123;&#x27;ls_provider&#x27;: &#x27;openai&#x27;, &#x27;ls_model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;ls_model_type&#x27;: &#x27;chat&#x27;, &#x27;ls_temperature&#x27;: None, &#x27;ls_max_tokens&#x27;: 1024&#125;, &#x27;parent_ids&#x27;: []&#125;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> AIGC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AIGC </tag>
            
            <tag> Python </tag>
            
            <tag> LangChain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac版RAGFlow部署手册</title>
      <link href="/Project/buildRAGFlow/"/>
      <url>/Project/buildRAGFlow/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h3 id="一、软件安装"><a href="#一、软件安装" class="headerlink" title="一、软件安装"></a><strong>一、软件安装</strong></h3><p><strong>前言：</strong></p><ul><li><p><code>./</code>代表ragflow项目路径</p></li><li><p>版本以及硬件需求</p><blockquote><p>CPU ≥ 4 cores<br>RAM ≥ 16 GB<br>Disk ≥ 50 GB<br>Docker &gt;&#x3D; 24.0.0 &amp; Docker Compose &gt;&#x3D; v2.26.1<br>node &gt;&#x3D; 18.20.1<br>python &lt; 3.12</p></blockquote></li><li><p>官方教程(ARM64): 本教程参考<a href="https://ragflow.io/docs/dev/launch_ragflow_from_source">官方部署文档</a></p></li></ul><h4 id="1-安装Homebrew（Mac的软件管家）"><a href="#1-安装Homebrew（Mac的软件管家）" class="headerlink" title="1. 安装Homebrew（Mac的软件管家）"></a><strong>1. 安装Homebrew（Mac的软件管家）</strong></h4><ul><li><p><strong>逐行执行</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先给终端开权限（防止卡死）</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> -R 755 /usr/local/bin  <span class="comment"># 输入密码后回车</span></span><br><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>常见问题：</strong><ul><li><strong>报错Failed to connect to raw.githubusercontent.com</strong> → 开科学上网</li><li><strong>报错Permission denied</strong> → 前面chmod命令没执行成功，重试！</li></ul></li></ul><h4 id="2-安装Docker-Desktop（比谈恋爱还重要）"><a href="#2-安装Docker-Desktop（比谈恋爱还重要）" class="headerlink" title="2. 安装Docker Desktop（比谈恋爱还重要）"></a><strong>2. 安装Docker Desktop（比谈恋爱还重要）</strong></h4><h5 id="Step-1：官网下载："><a href="#Step-1：官网下载：" class="headerlink" title="Step 1：官网下载："></a><strong>Step 1：官网下载</strong>：</h5><ol><li>访问 <a href="https://www.docker.com/products/docker-desktop">https://www.docker.com/products/docker-desktop</a></li><li>点击「Download for Mac」→ 选「Apple Chip」版本（M1&#x2F;M2&#x2F;M3&#x2F;M4芯片必选！）</li></ol><p><img src="https://bu.dusays.com/2025/05/19/682aee180dde9.png" alt="Docker官网"></p><h5 id="Step-2：手动安装："><a href="#Step-2：手动安装：" class="headerlink" title="Step 2：手动安装："></a><strong>Step 2：手动安装</strong>：</h5><ol><li>双击下载的<code>.dmg</code>文件</li><li>把Docker图标拖到Applications文件夹（就像拖走前任的照片）</li><li>第一次启动时：系统会弹窗警告 → 点「打开」</li><li>菜单栏出现小鲸鱼图标 → 说明安装成功！</li></ol><h5 id="Step-3：配置镜像加速："><a href="#Step-3：配置镜像加速：" class="headerlink" title="Step 3：配置镜像加速："></a><strong>Step 3：配置镜像加速</strong>：</h5><ol><li>点击小鲸鱼图标 → Preferences → Docker Engine</li><li>在JSON配置中添加：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2025/05/19/682aee1783dec.png" alt="Dcoker配置"></p><ol start="3"><li>点击「Apply &amp; Restart」→ 等鲸鱼吐泡泡重启</li></ol><h5 id="Step-4：验证安装："><a href="#Step-4：验证安装：" class="headerlink" title="Step 4：验证安装："></a><strong>Step 4：验证安装</strong>：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version  <span class="comment"># 应该显示Docker version v27.5.1+</span></span><br></pre></td></tr></table></figure><h3 id="二、系统设置-遇到对应错误再设置即可"><a href="#二、系统设置-遇到对应错误再设置即可" class="headerlink" title="二、系统设置(遇到对应错误再设置即可)"></a><strong>二、系统设置(遇到对应错误再设置即可)</strong></h3><h4 id="1-调整虚拟内存限制（防Elasticsearch崩溃）"><a href="#1-调整虚拟内存限制（防Elasticsearch崩溃）" class="headerlink" title="1. 调整虚拟内存限制（防Elasticsearch崩溃）"></a><strong>1. 调整虚拟内存限制（防Elasticsearch崩溃）</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时生效（立刻生效）</span></span><br><span class="line"><span class="built_in">sudo</span> sysctl -w vm.max_map_count=262144</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久生效（防止重启后失效）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;vm.max_map_count=262144&#x27;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> -a /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p><strong>原因：</strong>Elasticsearch需要大量虚拟内存，默认值太小会导致启动报错「max virtual memory areas vm.max_map_count [65530] is too low」</p><h4 id="2-修改文件句柄限制（防Too-many-open-files错误）"><a href="#2-修改文件句柄限制（防Too-many-open-files错误）" class="headerlink" title="2. 修改文件句柄限制（防Too many open files错误）"></a><strong>2. 修改文件句柄限制（防Too many open files错误）</strong></h4><ul><li><p>创建配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /Library/LaunchDaemons/limit.maxfiles.plist</span><br></pre></td></tr></table></figure></li><li><p>copy以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>limit.maxfiles<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>launchctl<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>limit<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>maxfiles<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>65535<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>65535<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>RunAtLoad<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>ServiceIPC<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>加载配置</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> launchctl load -w /Library/LaunchDaemons/limit.maxfiles.plist</span><br><span class="line">reboot  <span class="comment"># 必须重启！</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="三、下载RAGFlow"><a href="#三、下载RAGFlow" class="headerlink" title="三、下载RAGFlow"></a><strong>三、下载RAGFlow</strong></h3><h4 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a><strong>1. 安装Git</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git  <span class="comment"># Homebrew的优势体现出来了！</span></span><br></pre></td></tr></table></figure><h4 id="2-克隆仓库"><a href="#2-克隆仓库" class="headerlink" title="2. 克隆仓库"></a><strong>2. 克隆仓库</strong></h4><ul><li><p><strong>方案A：直接克隆（适合网络好）</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/infiniflow/ragflow.git</span><br><span class="line"><span class="built_in">cd</span> ragflow</span><br></pre></td></tr></table></figure></li><li><p><strong>方案B：国内镜像加速（适合下载慢）</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/mirrors/RAGFlow.git  <span class="comment"># 码云镜像</span></span><br><span class="line"><span class="built_in">cd</span> RAGFlow</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-安装python依赖"><a href="#3-安装python依赖" class="headerlink" title="3. 安装python依赖"></a>3. 安装python依赖</h4><p><strong>m系列芯片必看：</strong>打开<code>./pyproject.toml</code>，把以来中的<code>xgboost==1.5.0</code>改成<code>xgboost==1.6.0</code></p><ul><li><p>安装 uv：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipx install uv</span><br></pre></td></tr></table></figure></li><li><p>安装python依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 局部</span></span><br><span class="line">uv <span class="built_in">sync</span> --python 3.12</span><br><span class="line"><span class="comment"># 全局</span></span><br><span class="line">uv <span class="built_in">sync</span> --python 3.12 --all-extras</span><br></pre></td></tr></table></figure></li></ul><p><strong>tips：</strong>由于每个人的环境都是不一样的，这里可能会出现依赖安装出现问题，大家直接根据具体报错解决就好了，一般都是依赖冲突或者需要前置依赖</p><h3 id="四、Docker配置-划重点"><a href="#四、Docker配置-划重点" class="headerlink" title="四、Docker配置(划重点)"></a><strong>四、Docker配置(划重点)</strong></h3><h4 id="修改-docker-docker-compose-base-yml"><a href="#修改-docker-docker-compose-base-yml" class="headerlink" title="修改.&#x2F;docker&#x2F;docker-compose-base.yml"></a>修改.&#x2F;docker&#x2F;docker-compose-base.yml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果是m4芯片并且是最新版的docker需要在配置文件中添加如下内容</span></span><br><span class="line">- ES_JAVA_OPTS=-Xms2g -Xmx2g -XX:UseSVE=0</span><br><span class="line">- CLI_JAVA_OPTS=-XX:UseSVE=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果添加完上面的内容启动es还报错，需要把es的版本调高一点(博主的M4是会报错的)：</span></span><br><span class="line">image: elasticsearch:8.17.3</span><br></pre></td></tr></table></figure><p>完整的docker-compose-base.yml配置文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">es01:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ragflow-es-01</span></span><br><span class="line">    <span class="attr">profiles:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:8.17.3</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esdata01:/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;ES_PORT&#125;:9200</span></span><br><span class="line">    <span class="attr">env_file:</span> <span class="string">.env</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=es01</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ELASTIC_PASSWORD=$&#123;ELASTIC_PASSWORD&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.type=single-node</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">xpack.security.enabled=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">xpack.security.http.ssl.enabled=false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">xpack.security.transport.ssl.enabled=false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.routing.allocation.disk.watermark.low=5gb</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.routing.allocation.disk.watermark.high=3gb</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.routing.allocation.disk.watermark.flood_stage=2gb</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=$&#123;TIMEZONE&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ES_JAVA_OPTS=-Xms2g</span> <span class="string">-Xmx2g</span> <span class="string">-XX:UseSVE=0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CLI_JAVA_OPTS=-XX:UseSVE=0</span></span><br><span class="line">    <span class="attr">mem_limit:</span> <span class="string">$&#123;MEM_LIMIT&#125;</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;curl http://localhost:9200&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">120</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ragflow</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">infinity:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ragflow-infinity</span></span><br><span class="line">    <span class="attr">profiles:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">infinity</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">infiniflow/infinity:v0.6.0-dev3</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">infinity_data:/var/infinity</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./infinity_conf.toml:/infinity_conf.toml</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;/infinity_conf.toml&quot;</span>]</span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;INFINITY_THRIFT_PORT&#125;:23817</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;INFINITY_HTTP_PORT&#125;:23820</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;INFINITY_PSQL_PORT&#125;:5432</span></span><br><span class="line">    <span class="attr">env_file:</span> <span class="string">.env</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=$&#123;TIMEZONE&#125;</span></span><br><span class="line">    <span class="attr">mem_limit:</span> <span class="string">$&#123;MEM_LIMIT&#125;</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">nofile:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">500000</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">500000</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ragflow</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;http://localhost:23820/admin/node/current&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">120</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="comment"># mysql:5.7 linux/arm64 image is unavailable.</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0.39</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ragflow-mysql</span></span><br><span class="line">    <span class="attr">env_file:</span> <span class="string">.env</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=$&#123;MYSQL_PASSWORD&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=$&#123;TIMEZONE&#125;</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">--max_connections=1000</span></span><br><span class="line">      <span class="string">--character-set-server=utf8mb4</span></span><br><span class="line">      <span class="string">--collation-server=utf8mb4_unicode_ci</span></span><br><span class="line">      <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">      <span class="string">--tls_version=&quot;TLSv1.2,TLSv1.3&quot;</span></span><br><span class="line">      <span class="string">--init-file</span> <span class="string">/data/application/init.sql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;MYSQL_PORT&#125;:3306</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_data:/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./init.sql:/data/application/init.sql</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ragflow</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;mysqladmin&quot;</span> ,<span class="string">&quot;ping&quot;</span>, <span class="string">&quot;-uroot&quot;</span>, <span class="string">&quot;-p$&#123;MYSQL_PASSWORD&#125;&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">quay.io/minio/minio:RELEASE.2023-12-20T01-00-02Z</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ragflow-minio</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">server</span> <span class="string">--console-address</span> <span class="string">&quot;:9001&quot;</span> <span class="string">/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;MINIO_PORT&#125;:9000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;MINIO_CONSOLE_PORT&#125;:9001</span></span><br><span class="line">    <span class="attr">env_file:</span> <span class="string">.env</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_ROOT_USER=$&#123;MINIO_USER&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_ROOT_PASSWORD=$&#123;MINIO_PASSWORD&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=$&#123;TIMEZONE&#125;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio_data:/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ragflow</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="comment"># swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/valkey/valkey:8</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">valkey/valkey:8</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ragflow-redis</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">--requirepass</span> <span class="string">$&#123;REDIS_PASSWORD&#125;</span> <span class="string">--maxmemory</span> <span class="string">128mb</span> <span class="string">--maxmemory-policy</span> <span class="string">allkeys-lru</span></span><br><span class="line">    <span class="attr">env_file:</span> <span class="string">.env</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;REDIS_PORT&#125;:6379</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis_data:/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ragflow</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">esdata01:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">infinity_data:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">mysql_data:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">minio_data:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">redis_data:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">ragflow:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="修改-docker-entrypoint-sh"><a href="#修改-docker-entrypoint-sh" class="headerlink" title="修改.&#x2F;docker&#x2F;entrypoint.sh"></a>修改.&#x2F;docker&#x2F;entrypoint.sh</h4><p>当我们打开文件后会看到两个切换真实路径和nginx路径的提示，要把真实路径替换成项目的真实路径，nginx路径直接注释掉即可，下面是参考配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># replace env variables in the service_conf.yaml file</span></span><br><span class="line"><span class="built_in">rm</span> -rf ./conf/service_conf.yaml</span><br><span class="line"><span class="keyword">while</span> IFS= <span class="built_in">read</span> -r line || [[ -n <span class="string">&quot;<span class="variable">$line</span>&quot;</span> ]]; <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># Use eval to interpret the variable with default values</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="string">&quot;echo \&quot;<span class="variable">$line</span>\&quot;&quot;</span> &gt;&gt; ./conf/service_conf.yaml</span><br><span class="line"><span class="keyword">done</span> &lt; ./docker/service_conf.yaml.template</span><br><span class="line"><span class="comment"># /usr/sbin/nginx</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/</span><br><span class="line"></span><br><span class="line">PY=python3</span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="string">&quot;<span class="variable">$WS</span>&quot;</span> || <span class="variable">$WS</span> -lt 1 ]]; <span class="keyword">then</span></span><br><span class="line">  WS=1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">task_exe</span></span>()&#123;</span><br><span class="line">    JEMALLOC_PATH=$(pkg-config --variable=libdir jemalloc)/libjemalloc.so</span><br><span class="line">    <span class="keyword">while</span> [ 1 -eq 1 ];<span class="keyword">do</span></span><br><span class="line">      LD_PRELOAD=<span class="variable">$JEMALLOC_PATH</span> <span class="variable">$PY</span> rag/svr/task_executor.py <span class="variable">$1</span>;</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">0</span>;i&lt;WS;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  task_exe  <span class="variable">$i</span> &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ 1 -eq 1 ];<span class="keyword">do</span></span><br><span class="line">    <span class="variable">$PY</span> api/ragflow_server.py</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">wait</span>;</span><br></pre></td></tr></table></figure><h4 id="修改-docker-service-conf-yaml-template"><a href="#修改-docker-service-conf-yaml-template" class="headerlink" title="修改.&#x2F;docker&#x2F;service_conf.yaml.template"></a>修改.&#x2F;docker&#x2F;service_conf.yaml.template</h4><ul><li><p>修改这个配置文件的原因主要是因为启动时容器中的mysql和es的端口号和配置文件的对应不上</p></li><li><p>参考配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">ragflow:</span><br><span class="line">  host: <span class="variable">$&#123;RAGFLOW_HOST:-0.0.0.0&#125;</span></span><br><span class="line">  http_port: 9380</span><br><span class="line">mysql:</span><br><span class="line">  name: <span class="string">&#x27;$&#123;MYSQL_DBNAME:-rag_flow&#125;&#x27;</span></span><br><span class="line">  user: <span class="string">&#x27;$&#123;MYSQL_USER:-root&#125;&#x27;</span></span><br><span class="line">  password: <span class="string">&#x27;$&#123;MYSQL_PASSWORD:-infini_rag_flow&#125;&#x27;</span></span><br><span class="line">  host: <span class="string">&#x27;$&#123;MYSQL_HOST:-mysql&#125;&#x27;</span></span><br><span class="line">  port: 5455</span><br><span class="line">  max_connections: 100</span><br><span class="line">  stale_timeout: 30</span><br><span class="line">minio:</span><br><span class="line">  user: <span class="string">&#x27;$&#123;MINIO_USER:-rag_flow&#125;&#x27;</span></span><br><span class="line">  password: <span class="string">&#x27;$&#123;MINIO_PASSWORD:-infini_rag_flow&#125;&#x27;</span></span><br><span class="line">  host: <span class="string">&#x27;$&#123;MINIO_HOST:-minio&#125;:9000&#x27;</span></span><br><span class="line">es:</span><br><span class="line">  hosts: <span class="string">&#x27;http://$&#123;ES_HOST:-es01&#125;:1200&#x27;</span></span><br><span class="line">  username: <span class="string">&#x27;$&#123;ES_USER:-elastic&#125;&#x27;</span></span><br><span class="line">  password: <span class="string">&#x27;$&#123;ELASTIC_PASSWORD:-infini_rag_flow&#125;&#x27;</span></span><br><span class="line">infinity:</span><br><span class="line">  uri: <span class="string">&#x27;$&#123;INFINITY_HOST:-infinity&#125;:23817&#x27;</span></span><br><span class="line">  db_name: <span class="string">&#x27;default_db&#x27;</span></span><br><span class="line">redis:</span><br><span class="line">  db: 1</span><br><span class="line">  password: <span class="string">&#x27;$&#123;REDIS_PASSWORD:-infini_rag_flow&#125;&#x27;</span></span><br><span class="line">  host: <span class="string">&#x27;$&#123;REDIS_HOST:-redis&#125;:6379&#x27;</span></span><br></pre></td></tr></table></figure><p> <strong>注：</strong>博主之前遇到过启动RAGFlow服务时报连接不上，排查方法就是</p></li></ul><h3 id="五、启动服务"><a href="#五、启动服务" class="headerlink" title="五、启动服务"></a><strong>五、启动服务</strong></h3><h4 id="1-安装ragflow运行时需要的组件"><a href="#1-安装ragflow运行时需要的组件" class="headerlink" title="1. 安装ragflow运行时需要的组件"></a>1. 安装ragflow运行时需要的组件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose -f docker/docker-compose-base.yml up -d</span><br></pre></td></tr></table></figure><p>使用<code>docker ps</code>命令如果mysql、redis、es都正常运行表示成功了：</p><p><img src="https://bu.dusays.com/2025/05/19/682aeee6c1957.png" alt="Docker组件状态"></p><h4 id="2-修改端口映射文件"><a href="#2-修改端口映射文件" class="headerlink" title="2. 修改端口映射文件"></a>2. 修改端口映射文件</h4><p>需要把运行ragflow所需要的容器端口映射到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">open /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># hosts文件中追加一行即可：</span></span><br><span class="line">127.0.0.1  es01 infinity mysql minio redis</span><br></pre></td></tr></table></figure><h4 id="3-配置环境变量和hf地址"><a href="#3-配置环境变量和hf地址" class="headerlink" title="3. 配置环境变量和hf地址"></a>3. 配置环境变量和hf地址</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .venv/bin/activate</span><br><span class="line"><span class="built_in">export</span> PYTHONPATH=$(<span class="built_in">pwd</span>)</span><br><span class="line"><span class="built_in">export</span> HF_ENDPOINT=https://hf-mirror.com</span><br></pre></td></tr></table></figure><h4 id="4-启动RAGFlow-后台服务"><a href="#4-启动RAGFlow-后台服务" class="headerlink" title="4. 启动RAGFlow 后台服务"></a>4. 启动RAGFlow 后台服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash docker/entrypoint.sh</span><br></pre></td></tr></table></figure><p>如果如果在执行的时后报缺少<code>nltk</code>、<code>worknet</code>或者其他的库文件不存在的错误，根据提示安装即可</p><p><img src="https://bu.dusays.com/2025/05/19/682aee17f39ea.png" alt="RAGFlow后台服务"></p><h4 id="5-启动RAGFlow-前端服务"><a href="#5-启动RAGFlow-前端服务" class="headerlink" title="5. 启动RAGFlow 前端服务"></a>5. 启动RAGFlow 前端服务</h4><p>因为上面的终端服务不能停止，需要在项目根目录中再打开一个终端窗口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> web  </span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2025/05/19/682aee1776284.png" alt="RAGFlow前端服务"></p><h4 id="6-RAGFlow启动脚本"><a href="#6-RAGFlow启动脚本" class="headerlink" title="6. RAGFlow启动脚本"></a>6. RAGFlow启动脚本</h4><p>由于本小节中的1、3、4、5步每次启动RAGFlow时都要重复执行，所以我们可以写一个脚本来帮我们完成以上操作，启动脚本代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前工作目录的绝对路径</span></span><br><span class="line">CURRENT_DIR=$(<span class="built_in">pwd</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一部分：启动Docker容器</span></span><br><span class="line">osascript -e <span class="string">&quot;tell application \&quot;Terminal\&quot; to do script \&quot;cd &#x27;<span class="variable">$CURRENT_DIR</span>&#x27; &amp;&amp; docker compose -f docker/docker-compose-base.yml up -d\&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待10秒让Docker服务启动</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;等待Docker服务初始化（10秒）...&quot;</span></span><br><span class="line"><span class="built_in">sleep</span> 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二部分：激活虚拟环境并运行Python相关命令</span></span><br><span class="line">osascript -e <span class="string">&quot;tell application \&quot;Terminal\&quot; to do script \&quot;cd &#x27;<span class="variable">$CURRENT_DIR</span>&#x27; &amp;&amp; source .venv/bin/activate &amp;&amp; export PYTHONPATH=\$(pwd) &amp;&amp; export HF_ENDPOINT=https://hf-mirror.com &amp;&amp; bash docker/entrypoint.sh\&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三部分：启动web开发服务器</span></span><br><span class="line">osascript -e <span class="string">&quot;tell application \&quot;Terminal\&quot; to do script \&quot;cd &#x27;<span class="variable">$CURRENT_DIR</span>/web&#x27; &amp;&amp; npm run dev\&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>直接在项目根据路中创建一个<code>.sh</code>脚本，每次想要启动时直接在项目根目录运行当前脚本即可。</p><h3 id="六、验证安装"><a href="#六、验证安装" class="headerlink" title="六、验证安装"></a><strong>六、验证安装</strong></h3><h4 id="1-基础检查"><a href="#1-基础检查" class="headerlink" title="1. 基础检查"></a>1. 基础检查</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查容器状态（STATUS应为running）</span></span><br><span class="line">docker ps -a | grep ragflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查端口监听（看是否有9000端口）</span></span><br><span class="line">lsof -i :900</span><br></pre></td></tr></table></figure><h4 id="2-浏览器验证："><a href="#2-浏览器验证：" class="headerlink" title="2. 浏览器验证："></a>2. 浏览器验证：</h4><p>打开Chrome → 输入<code>http://localhost:9222</code>（如果你没有改端口），如能你可以成功进去的下面的界面并且可以完成注册和登录那么你的RAGFlow就算启动成功了：</p><p><img src="https://bu.dusays.com/2025/05/19/682aee1850d15.png" alt="RAGFlow Login"></p><h3 id="七、模型配置"><a href="#七、模型配置" class="headerlink" title="七、模型配置"></a><strong>七、模型配置</strong></h3><p>本文使用Ollama运行本地模型来作为RAGFlow的模型提供方，如果大家想方便的话也可以选一个喜欢的模型然后用官方的api-key即可</p><h4 id="1-Ollama安装与配置"><a href="#1-Ollama安装与配置" class="headerlink" title="1. Ollama安装与配置"></a>1. Ollama安装与配置</h4><ul><li><p>Ollama安装：Ollama的安装教程可参考我的这一篇文章：<a href="https://blog.smallscholar.com/Project/installOllama/">Ollama安装</a></p></li><li><p>设置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> OLLAMA_HOST=0.0.0.0:11434</span><br></pre></td></tr></table></figure></li><li><p>运行模型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ollama run model-name</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-在RAGFlow-中添加模型"><a href="#2-在RAGFlow-中添加模型" class="headerlink" title="2. 在RAGFlow 中添加模型"></a>2. 在RAGFlow 中添加模型</h4><ul><li><p>登录RAGFlow网页 → 点击右上角头像 → 「模型供应商」</p></li><li><p>往下拉在「待添加的模型」→ 选择「Ollama」，然后按照图片中的配置：</p><p><img src="https://bu.dusays.com/2025/05/19/682aee174c65f.png" alt="Ollama配置"></p><p>下面是各输入框的解释：</p><ul><li><p>模型类型</p><ul><li><strong>Chat模型(AI的“嘴皮子”)</strong><ul><li><strong>干啥用的</strong>：负责和你聊天对话，生成人类能看懂的回答</li><li><strong>经典模型</strong>：Llama3、Qwen、GPT、DeepSeek</li><li><strong>举个栗子🌰</strong>：<br>当你问“如何安装Ollama”，Chat模型就会像话痨同事一样，把安装步骤一条条讲给你听</li><li><strong>选型秘诀</strong>：<ul><li>需要“话多且准”：选参数大的模型（比如70B）</li><li>电脑配置低：用7B小模型（虽然可能胡说八道）</li></ul></li></ul></li><li><strong>Embedding模型(文字“翻译官”)</strong><ul><li><strong>干啥用的</strong>：把文字变成一串数字（向量），方便计算机理解语义</li><li><strong>经典模型</strong>：BGE、text2vec、OpenAI的text-embedding-3-small</li><li><strong>灵魂比喻</strong>：<br>相当于给每句话发一个身份证号，说“春天”和“花开”的号码接近，“冰箱”和“宇宙”的号码离得远</li><li><strong>选型秘诀</strong>：<ul><li>中文优先：选<code>bge-large-zh</code>这类中文专用模型</li><li>速度优先：用<code>small</code>版（精度会下降）</li></ul></li></ul></li><li><strong>Rerank模型(结果“质检员”)</strong><ul><li><strong>干啥用的</strong>：对搜索出的100条结果重新打分，把最相关的排到最前面</li><li><strong>经典模型</strong>：bge-reranker、cohere-rerank</li><li><strong>举个栗子🌰</strong>：<br>你搜“苹果”，初步结果可能包含水果、手机、电影公司。Rerank模型会说：“根据上下文，用户其实想查iPhone”，然后把手机相关结果置顶</li><li><strong>选型秘诀</strong>：<ul><li>精准度 vs 速度：大模型准但慢，小模型快但糙</li><li>可选项少：目前主流就2-3种</li></ul></li></ul></li><li><strong>Image2Text模型 —— 图片的“解码器”</strong></li><li><strong>干啥用的</strong>：把图片里的文字抠出来（比如扫描版PDF&#x2F;照片里的文字）</li><li><strong>经典模型</strong>：PaddleOCR、Donut、EasyOCR</li><li><strong>灵魂场景</strong>：<br>你上传一张表情包截图，AI能读出上面的字：“一键三连的都是帅哥美女！”</li><li><strong>选型秘诀</strong>：<ul><li>中文场景：优先选<code>PaddleOCR</code>（国产之光）</li><li>复杂排版：用<code>Donut</code>（但吃显卡）</li></ul></li></ul><p><strong>“四大天王的工作流程”：</strong></p><blockquote><p>你问问题 →<br>if image then Image2Text先提取文字 →<br>Embedding模型翻译成向量 →<br>搜索知识库 →<br>Rerank模型重新排序 →<br>Chat模型组织答案 →<br>返回人话</p></blockquote></li><li><p>模型名称：<code>Ollama</code>中的模型名称，<strong>一定</strong>要与<code>Ollama</code>中的模型名称保持一致</p></li><li><p>基础url：调用模型的url</p></li><li><p>API-key：如果是使用API的方式调用模型时需要填写此内容</p></li><li><p>最大token数：模型返回的最大token数量</p></li></ul></li><li><p>上面是添加的<code>chat</code>模型，添加<code>Embedding</code>模型同理，博主这里使用的是智谱的<code>Embedding</code>模型，大家本地启动<code>Embedding</code>模型或者使用API-key都可以</p></li></ul><h4 id="3-上传知识库"><a href="#3-上传知识库" class="headerlink" title="3. 上传知识库"></a>3. <strong>上传知识库</strong></h4><ul><li><p>点击「知识库」→ 「创建知识库」→ 输入知识库名称</p></li><li><p>进行知识库配置</p><p><img src="https://bu.dusays.com/2025/05/19/682aee176c64d.png" alt="RAG 设置"></p></li><li><p>上传文件限制：</p><ul><li>格式：PDF&#x2F;DOCX&#x2F;TXT&#x2F;Markdown</li><li>单文件≤100MB（超过会卡到怀疑人生）</li></ul><p>当文件上传成功之后我们可以搜索页面对刚刚上传的文档进行验证：<br><img src="https://bu.dusays.com/2025/05/19/682af05d51f3e.png" alt="文档上传验证"></p></li></ul><h4 id="4-进行聊天"><a href="#4-进行聊天" class="headerlink" title="4. 进行聊天"></a>4. 进行聊天</h4><p>当上述的工作都完成后我们就可以点击RAGFlow的聊天页面进行聊天啦，当我们第一次进行这个页面时是什么都没有的，需要先点击[创建助手]以配置助手的基本信息，包括：助手的名字，助手使用的知识库以及模型等等，当我们这些工作都做完之后就可以与智能助手进行聊天了：<br><img src="https://bu.dusays.com/2025/05/19/682af05712a75.png" alt="chat"></p><h3 id="八、常见错误大全"><a href="#八、常见错误大全" class="headerlink" title="八、常见错误大全"></a><strong>八、常见错误大全</strong></h3><ol><li><p><strong>Docker报错<code>no space left on device</code></strong></p><ul><li><p><strong>原因</strong>：Docker虚拟磁盘满了（默认只分配64GB）</p></li><li><p><strong>解决</strong>：</p><ul><li><p>打开Docker Desktop → Settings → Resources</p></li><li><p>调整Disk image size到100GB+</p></li><li><p>点击Apply &amp; Restart</p></li></ul></li></ul></li><li><p><strong><code>CUDA out of memory</code></strong></p><ul><li><strong>原因</strong>：模型太大，Mac的GPU扛不住</li><li><strong>优雅降级法</strong>：<ol><li>在RAGFlow网页 → 模型管理</li><li>选择更小模型（如<code>bge-small-zh</code>）</li><li>修改推理参数：<code>max_length=512</code></li></ol></li></ul></li><li><p><strong>文件解析卡住并且一直在1%以下，解析状态提示<code>Task is queued</code></strong></p><p>如果文件解析卡住时首先要检查一下后台服务器有没有报错，如果没有报错的话可以耐心等待一会或者重新试一下，如果报错的话就需要根据报错来解决相应的问题了, 以下是常见问题：</p><ul><li><p>During handling of the above exception, another exception occurred: </p><ul><li>原因：mysql数据库中存在脏数据，把mysql数据库中脏数据清空即可，一般是task表中有脏数据</li><li>完整报错：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/Users/songzuoqiang/Documents/ragflow/.venv/lib/python3.10/site-packages/peewee.py&quot;</span>, line 7253, <span class="keyword">in</span> get</span><br><span class="line">    <span class="built_in">return</span> clone.execute(database)[0]</span><br><span class="line">  File <span class="string">&quot;/Users/songzuoqiang/Documents/ragflow/.venv/lib/python3.10/site-packages/peewee.py&quot;</span>, line 4553, <span class="keyword">in</span> __getitem__</span><br><span class="line">    <span class="built_in">return</span> self.row_cache[item]</span><br><span class="line">IndexError: list index out of range</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/Users/songzuoqiang/Documents/ragflow/rag/svr/task_executor.py&quot;</span>, line 231, <span class="keyword">in</span> build_chunks</span><br><span class="line">    cks = await trio.to_thread.run_sync(lambda: chunker.chunk(task[<span class="string">&quot;name&quot;</span>], binary=binary, from_page=task[<span class="string">&quot;from_page&quot;</span>],</span><br><span class="line">  File <span class="string">&quot;/Users/songzuoqiang/Documents/ragflow/.venv/lib/python3.10/site-packages/trio/_threads.py&quot;</span>, line 447, <span class="keyword">in</span> to_thread_run_sync</span><br><span class="line">    <span class="built_in">return</span> msg_from_thread.unwrap()</span><br><span class="line">  File <span class="string">&quot;/Users/songzuoqiang/Documents/ragflow/.venv/lib/python3.10/site-packages/outcome/_impl.py&quot;</span>, line 213, <span class="keyword">in</span> unwrap</span><br><span class="line">    raise captured_error</span><br><span class="line">  File <span class="string">&quot;/Users/songzuoqiang/Documents/ragflow/.venv/lib/python3.10/site-packages/trio/_threads.py&quot;</span>, line 373, <span class="keyword">in</span> do_release_then_return_result</span><br><span class="line">    <span class="built_in">return</span> result.unwrap()</span><br><span class="line">  File <span class="string">&quot;/Users/songzuoqiang/Documents/ragflow/.venv/lib/python3.10/site-packages/outcome/_impl.py&quot;</span>, line 213, <span class="keyword">in</span> unwrap</span><br><span class="line">    raise captured_error</span><br><span class="line">  File <span class="string">&quot;/Users/songzuoqiang/Documents/ragflow/.venv/lib/python3.10/site-packages/trio/_threads.py&quot;</span>, line 392, <span class="keyword">in</span> worker_fn</span><br><span class="line">    ret = context.run(sync_fn, *args)</span><br><span class="line">  File <span class="string">&quot;/Users/songzuoqiang/Documents/ragflow/rag/svr/task_executor.py&quot;</span>, line 231, <span class="keyword">in</span> &lt;lambda&gt;</span><br><span class="line">    cks = await trio.to_thread.run_sync(lambda: chunker.chunk(task[<span class="string">&quot;name&quot;</span>], binary=binary, from_page=task[<span class="string">&quot;from_page&quot;</span>],</span><br><span class="line">  File <span class="string">&quot;/Users/songzuoqiang/Documents/ragflow/rag/app/naive.py&quot;</span>, line 252, <span class="keyword">in</span> chunk</span><br><span class="line">    callback(0.1, <span class="string">&quot;Start to parse.&quot;</span>)</span><br><span class="line">  File <span class="string">&quot;/Users/songzuoqiang/Documents/ragflow/rag/svr/task_executor.py&quot;</span>, line 139, <span class="keyword">in</span> set_progress</span><br><span class="line">    cancel = TaskService.do_cancel(task_id)</span><br><span class="line">  File <span class="string">&quot;/Users/songzuoqiang/Documents/ragflow/.venv/lib/python3.10/site-packages/peewee.py&quot;</span>, line 3128, <span class="keyword">in</span> inner</span><br><span class="line">    <span class="built_in">return</span> fn(*args, **kwargs)</span><br><span class="line">  File <span class="string">&quot;/Users/songzuoqiang/Documents/ragflow/api/db/services/task_service.py&quot;</span>, line 175, <span class="keyword">in</span> do_cancel</span><br><span class="line">    task = cls.model.get_by_id(<span class="built_in">id</span>)</span><br><span class="line">  File <span class="string">&quot;/Users/songzuoqiang/Documents/ragflow/.venv/lib/python3.10/site-packages/peewee.py&quot;</span>, line 6816, <span class="keyword">in</span> get_by_id</span><br><span class="line">    <span class="built_in">return</span> cls.get(cls._meta.primary_key == pk)</span><br><span class="line">  File <span class="string">&quot;/Users/songzuoqiang/Documents/ragflow/.venv/lib/python3.10/site-packages/peewee.py&quot;</span>, line 6805, <span class="keyword">in</span> get</span><br><span class="line">    <span class="built_in">return</span> sq.get()</span><br><span class="line">  File <span class="string">&quot;/Users/songzuoqiang/Documents/ragflow/.venv/lib/python3.10/site-packages/peewee.py&quot;</span>, line 7256, <span class="keyword">in</span> get</span><br><span class="line">    raise self.model.DoesNotExist(<span class="string">&#x27;%s instance matching query does &#x27;</span></span><br><span class="line">api.db.db_models.TaskDoesNotExist: &lt;Model: Task&gt; instance matching query does not exist:</span><br><span class="line">SQL: SELECT `t1`.`<span class="built_in">id</span>`, `t1`.`create_time`, `t1`.`create_date`, `t1`.`update_time`, `t1`.`update_date`, `t1`.`doc_id`, `t1`.`from_page`, `t1`.`to_page`, `t1`.`task_type`, `t1`.`begin_at`, `t1`.`process_duation`, `t1`.`progress`, `t1`.`progress_msg`, `t1`.`retry_count`, `t1`.`digest`, `t1`.`chunk_ids` FROM `task` AS `t1` WHERE (`t1`.`<span class="built_in">id</span>` = %s) LIMIT %s OFFSET %s</span><br><span class="line">Params: [<span class="string">&#x27;e63e63c4347d11f08cfc0ed34b4b35a3&#x27;</span>, 1, 0]</span><br></pre></td></tr></table></figure></li><li><p>如果用的是官方的Embedding模型，RAGFolw会默认从huggingface中下载模型，如果不用魔法时文件解析也会卡住：</p><ul><li><p>解析方案：启用魔法或者环境变量中进行添加hf镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 手动下载模型到本地</span></span><br><span class="line"><span class="built_in">export</span> HF_ENDPOINT=https://hf-mirror.com</span><br><span class="line">huggingface-cli download --resume-download BAAI/bge-large-zh --cache-dir ~/.cache/huggingface</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启RAGFlow</span></span><br><span class="line">docker compose restart</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>持续更新中…</strong></p></li></ol><p><strong>结语：</strong>如果你通过这篇文章成功搭建了RAGFlow，那么请告诉你的朋友：“关注这个博主，毕竟TA连你都可以教会诶！” ，如果你有任何关于RAGFlow的问题或疑惑欢迎在评论区讨论🥳。</p></div>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目搭建 </tag>
            
            <tag> LLM </tag>
            
            <tag> RAG </tag>
            
            <tag> Agent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LLM的定制管家--Ollama</title>
      <link href="/Project/installOllama/"/>
      <url>/Project/installOllama/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h3 id="一、Ollama是啥？——-一个让电脑变“AI脑”的神器"><a href="#一、Ollama是啥？——-一个让电脑变“AI脑”的神器" class="headerlink" title="一、Ollama是啥？—— 一个让电脑变“AI脑”的神器"></a><strong>一、Ollama是啥？—— 一个让电脑变“AI脑”的神器</strong></h3><ul><li><strong>人话版</strong>：Ollama就像大模型的“万能插座”，能让你在本地电脑上插拔各种AI模型（比如Llama、Qwen、DeepSeek），还不用写代码！</li><li><strong>官方定义</strong>：开源工具，支持一键下载、运行、管理大语言模型，兼容Windows&#x2F;Mac&#x2F;Linux，连你家路由器都能跑（只要内存够）！</li><li><strong>为啥用它</strong>：隐私安全（数据不出门）、省钱（不用买云服务）、装X利器（“看，我的电脑会写诗！”）</li></ul><h3 id="二、安装Ollama——比泡面还简单"><a href="#二、安装Ollama——比泡面还简单" class="headerlink" title="二、安装Ollama——比泡面还简单"></a><strong>二、安装Ollama——比泡面还简单</strong></h3><h4 id="Step-1：-下载安装包"><a href="#Step-1：-下载安装包" class="headerlink" title="Step 1： 下载安装包"></a><strong>Step 1：</strong> <strong>下载安装包</strong></h4><p><strong>官网直达</strong>：<a href="https://ollama.com/">Ollama</a>，点击“Download”按钮，选你的操作系统（Win&#x2F;Mac&#x2F;Linux三选一）</p><p><img src="https://bu.dusays.com/2025/05/19/682a0e98a958d.png" alt="ollama"></p><ul><li><p><strong>Windows用户</strong>：双击<code>.exe</code>文件，一路“Next”到底，连你家猫都能装（前提是它不乱踩键盘）</p></li><li><p><strong>Mac用户</strong>：拖进“应用程序”文件夹，比拉黑前男友微信还容易</p></li><li><p><strong>Linux用户</strong>：复制粘贴一行代码搞定👇：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://ollama.com/install.sh | sh  <span class="comment"># 连sudo都不需要，感动吗？</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Step-1：-验证安装"><a href="#Step-1：-验证安装" class="headerlink" title="Step 1： 验证安装"></a><strong>Step 1：</strong> <strong>验证安装</strong></h4><p>打开终端（Windows用PowerShell，Mac&#x2F;Linux用Terminal），输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama --version</span><br></pre></td></tr></table></figure><p>如果蹦出类似<code>ollama version 0.6.6</code>，恭喜！你已经打败了全国99%的安装失败选手</p><h3 id="三、下载模型——选个AI“灵魂伴侣”"><a href="#三、下载模型——选个AI“灵魂伴侣”" class="headerlink" title="三、下载模型——选个AI“灵魂伴侣”"></a><strong>三、下载模型——选个AI“灵魂伴侣”</strong></h3><h4 id="Step-2：挑模型就像选奶茶"><a href="#Step-2：挑模型就像选奶茶" class="headerlink" title="Step 2：挑模型就像选奶茶"></a><strong>Step 2：挑模型就像选奶茶</strong></h4><p><strong>官方模型库</strong>：<a href="Ollama/search">Ollama&#x2F;search</a>，大家可以选择如<code>deepseek-r1</code>、<code>qwen</code>、<code>Llama4</code>等热门模型进行下载。</p><p><img src="https://bu.dusays.com/2025/05/19/682a0e9984914.png" alt="ollama/search"></p><ul><li><strong>小内存用户</strong>（8GB）：选<code>qwen:7b</code>或<code>deepseek-r1:1.5b</code>（15亿参数，勉强能聊）。</li><li><strong>土豪配置</strong>（32GB+）：直接上<code>qwen:110b</code>或<code>deepseek-r1:70b</code>（参数越多越聪明，但别让电脑冒烟）</li></ul><h4 id="Step-2：一键下载模型"><a href="#Step-2：一键下载模型" class="headerlink" title="Step 2：一键下载模型"></a><strong>Step 2：一键下载模型</strong></h4><p>在终端输入魔法咒语：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run qwen:7b  <span class="comment"># 第一次运行会自动下载，泡杯咖啡等进度条吧～</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2025/05/19/682a0e9949903.png" alt="ollama-run"></p><p><strong>注意</strong>：模型默认存在<code>C:\Users\你的用户名\.ollama</code>（Windows）或<code>~/.ollama</code>（Mac&#x2F;Linux）。想换位置？且看第四步“高级操作”</p><h3 id="四、高级操作——让Ollama更“听话”"><a href="#四、高级操作——让Ollama更“听话”" class="headerlink" title="四、高级操作——让Ollama更“听话”"></a><strong>四、高级操作——让Ollama更“听话”</strong></h3><h4 id="1-改模型存储路径（救救C盘！）"><a href="#1-改模型存储路径（救救C盘！）" class="headerlink" title="1. 改模型存储路径（救救C盘！）"></a><strong>1. 改模型存储路径（救救C盘！）</strong></h4><ul><li><strong>Windows</strong>：<ol><li>右键“此电脑”→属性→高级系统设置→环境变量→新建系统变量<code>OLLAMA_MODELS</code>，路径填<code>D:\ollama</code>（随便你放哪）。</li><li>重启电脑，新模型都会存这里！</li></ol></li><li><strong>Mac&#x2F;Linux</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export OLLAMA_MODELS=/你的/自定义/路径&#x27;</span> &gt;&gt; ~/.zshrc  <span class="comment"># 或.bashrc</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc  <span class="comment"># 让配置生效</span></span><br></pre></td></tr></table></figure><h4 id="2-命令行指南"><a href="#2-命令行指南" class="headerlink" title="2. 命令行指南"></a><strong>2. 命令行指南</strong></h4><ul><li><code>ollama list</code>：看看你下载了哪些模型（显摆用）。</li></ul><p><img src="https://bu.dusays.com/2025/05/19/682a0e976a5d0.png" alt="ollama-list"></p><ul><li><p><code>ollama rm 模型名</code>：删掉不用的模型（清理前任的AI记忆）。</p></li><li><p><code>ollama run 模型名</code>：与喜欢的模型进行对话（我前面已经讲过了哦）。</p><ul><li>在对话页面输入 <code>/?</code>可以获取神龙之力，获取神的指引。</li></ul><p><img src="https://bu.dusays.com/2025/05/19/682a0e976a5d0.png" alt="ollama-help"></p><ul><li>可以输入 <code>/bye</code>以退出当前对话。</li></ul></li><li><p><code>ollama ps</code>：检查哪个模型在运行（防止AI偷偷写小说）。</p></li><li><p><code>ollama stop 模型名</code>：停止当前正在运行的模型（当然有个更暴力的方法直接杀掉对应的进程即可）。</p></li></ul><h3 id="五、图形界面——告别黑乎乎的终端！"><a href="#五、图形界面——告别黑乎乎的终端！" class="headerlink" title="五、图形界面——告别黑乎乎的终端！"></a><strong>五、图形界面——告别黑乎乎的终端！</strong></h3><h4 id="方案1：ChatBox（颜值党必备）"><a href="#方案1：ChatBox（颜值党必备）" class="headerlink" title="方案1：ChatBox（颜值党必备）"></a><strong>方案1：ChatBox（颜值党必备）</strong></h4><ol><li><strong>下载</strong>：<a href="https://chatboxai.app/">chatboxai.app</a>，安装后打开。</li><li><strong>设置</strong>：选“Ollama API”→填地址<code>http://localhost:11434</code>→选你下载的模型。</li><li><strong>开聊</strong>：现在界面和ChatGPT一模一样，截图发朋友圈吧！</li></ol><p><img src="https://bu.dusays.com/2025/05/19/682a0e976a5d0.png" alt="chatbox"></p><h4 id="方案2：Open-WebUI"><a href="#方案2：Open-WebUI" class="headerlink" title="方案2：Open WebUI"></a><strong>方案2：Open WebUI</strong></h4><ol><li><p><strong>安装Docker</strong>（Windows需先开WSL和Hyper-V）。</p></li><li><p>一行代码启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:8080 -v ollama-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main</span><br></pre></td></tr></table></figure></li><li><p>访问<code>http://localhost:3000</code>，注册账号开聊</p></li></ol><h3 id="六、安全加固——别让电脑“裸奔”"><a href="#六、安全加固——别让电脑“裸奔”" class="headerlink" title="六、安全加固——别让电脑“裸奔”"></a><strong>六、安全加固——别让电脑“裸奔”</strong></h3><ul><li><strong>风险</strong>：默认端口<code>11434</code>暴露公网？黑客可能偷模型、挖矿甚至让你电脑唱《学猫叫》！</li><li><strong>防护措施</strong>：<ol><li><strong>本地使用</strong>：启动时加<code>OLLAMA_HOST=127.0.0.1 ollama serve</code>（锁死本地访问）。</li><li><strong>公网开放</strong>：用Nginx加密码认证+HTTPS加密（比较复杂，有缘下个教程再讲）。</li><li><strong>定期更新</strong>：<code>ollama update</code>！旧版本漏洞多到能筛米。</li></ol></li></ul><h3 id="七、常见问题——遇到bug别慌！"><a href="#七、常见问题——遇到bug别慌！" class="headerlink" title="七、常见问题——遇到bug别慌！"></a><strong>七、常见问题——遇到bug别慌！</strong></h3><ul><li><strong>Q：模型下载卡在99%？</strong><br>A：按<code>Ctrl+C</code>取消，重新运行命令，Ollama会自动续传（比断网重下小电影靠谱的多了）。</li><li><strong>Q：模型运行卡成PPT？</strong><br>A：换更小的模型（比如1.5B），或者检查内存是否被《原神》<code>吃光了</code>。</li><li><strong>Q：想用GPU加速？</strong><br>A：启动命令加<code>--gpu</code>，比如<code>ollama run qwen:7b --gpu</code>（前提是你有显卡且驱动正常）。</li></ul><p><strong>最后一句</strong>：如果教程对你有用，请大声告诉你的朋友：“关注这个博主，TA连你都能教会！”</p></div>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目搭建 </tag>
            
            <tag> LLM </tag>
            
            <tag> Ollama </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo个人博客搭建及上线全流程</title>
      <link href="/Project/buildingHexoBlog/"/>
      <url>/Project/buildingHexoBlog/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p><code>Hexo</code>是一个快速、简洁且高效的博客框架。 <code>Hexo</code> 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他标记语言）解析文章，在几秒内，即可利用现有的主题生成静态网页。</p><p>前置条件： 需要您的机器上安装好<code>Git</code>和<code>Node.js</code></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p><strong>注：</strong>前两步可以直接看官方文档：<a href="https://hexo.io/zh-cn/docs/">hexo安装部署</a></p><h5 id="1-hexo建站"><a href="#1-hexo建站" class="headerlink" title="1. hexo建站"></a>1. hexo建站</h5><ul><li><p>在终端执行以下命令来安装 Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li><li><p>选择一个目录来存放你的博客文件，并在该目录下初始化 Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init myblog</span><br><span class="line"><span class="built_in">cd</span> myblog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>在项目根目录下执行以下命令来生成静态文件并启动本地服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清除缓存文件</span></span><br><span class="line">hexo g <span class="comment"># 生成静态文件</span></span><br><span class="line">hexo s <span class="comment"># 启动本地服务器</span></span><br></pre></td></tr></table></figure></li></ul><p>​随后可以打开浏览器访问 <a href="http://localhost:4000/%EF%BC%8C%E5%A6%82%E6%9E%9C%E7%9C%8B%E5%88%B0%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%EF%BC%8C%E8%AF%B4%E6%98%8E%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F%E3%80%82">http://localhost:4000/，如果看到博客页面，说明本地搭建成功。</a></p><ul><li><p>如果您觉得官方的主题不够美观，你可以从 <a href="https://hexo.io/themes/">Hexo 主题官网</a> 下载并安装你喜欢的主题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-theme-name</span><br></pre></td></tr></table></figure><p>然后在 <code>_config.yml</code>文件中指定对应的主题即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">hexo-theme-name</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="2-hexo部署"><a href="#2-hexo部署" class="headerlink" title="2. hexo部署"></a>2. hexo部署</h5><ul><li><p><strong>创建 GitHub 仓库</strong>：登录 GitHub，新建一个仓库，名称为<code>git用户名.github.io</code>。</p></li><li><p><strong>配置部署信息</strong>：在 <code>_config.yml </code>文件中添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:git用户名/git用户名.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure></li><li><p><strong>安装部署插件</strong>： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p><strong>执行部署命令</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d <span class="comment"># 清除缓存、生成静态文件并部署到 GitHub Pages</span></span><br></pre></td></tr></table></figure><p>完成后，你可以通过 <code>git用户名.github.io</code> 来访问你的博客</p></li></ul><h5 id="3-域名映射"><a href="#3-域名映射" class="headerlink" title="3. 域名映射"></a>3. 域名映射</h5><ul><li><p>购买域名：可以根据自己的喜好选择不同的渠道进去购买，因为阿里云比较省心，所以我比较喜欢用阿里云，下面是阿里云的购买链接：<a href="https://wanwang.aliyun.com/?spm=5176.100251.111252.24.375f4f158mTIrm">阿里云域名</a></p></li><li><p>DNS解析：登录到您的域名注册商控制台，找到域名管理并进入解析页面，添加一条记录，下面是我的配置参考：</p><p><img src="https://bu.dusays.com/2025/05/13/6822f92daf1b2.png" alt="阿里云DNS解析地址"></p></li><li><p>配置Hexo：在Hexo博客的<code>source</code>文件夹下创建一个名为<code>CNAME</code>的文件，内容为您的自定义域名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example.com</span><br></pre></td></tr></table></figure></li><li><p>配置GitHub仓库：进入GitHub仓库的设置页面，在GitHub Pages部分找到Custom domain，输入您的自定义域名并保存:</p><p><img src="https://bu.dusays.com/2025/05/13/6822fc1e684fa.png" alt="git仓库配置"></p><p>完成以上步骤后，等待几分钟，Hexo博客就可以通过自定义域名访问了。</p></li></ul><h5 id="4-SSL证书购买与部署："><a href="#4-SSL证书购买与部署：" class="headerlink" title="4. SSL证书购买与部署："></a>4. SSL证书购买与部署：</h5><ul><li><p>证书购买：和域名一样，大家根据自己的喜好选择运营商购买SSL证书即可，阿里云地址为：<a href="https://yundun.console.aliyun.com/?spm=5176.12818093.overview_recent.3.3be92cc9Ci62yA&p=cas#/certExtend/buy/cn-hangzhou?currentPage=1&pageSize=10&keyword=&statusCode=">阿里云SSL证书管理</a></p><p><img src="https://bu.dusays.com/2025/05/13/6823012e23d31.png" alt="阿里云证书购买"></p><p>如果预算不够的话，也可以点击图片中的<code>个人测试证书</code>，可以免费购买3个月的</p></li><li><p>证书部署：</p><p>（1）创建证书：购买证书之后需要在证书管理页面创建证书</p><p><img src="https://bu.dusays.com/2025/05/13/6823023720c11.png" alt="创建证书"></p><p>（2）申请证书：创建完证书之后需要提交申请</p><p><img src="https://bu.dusays.com/2025/05/13/682304071e138.png" alt="申请证书"></p><p>证书申请通过之后证书的状态会变成已签发，此时证书申请完成。</p><p>（3）网站协议切换成Https：还是github仓库的设置界面，把Enforce HTTPS勾上即可</p><p><img src="https://bu.dusays.com/2025/05/13/6823099062a2f.png" alt="网站协议转换"></p></li></ul><p>至此，个人博客的搭建和部署结束，我们可以通过访问 <code>https://博客域名</code>访问我们的博客啦！</p><h3 id="网站验证"><a href="#网站验证" class="headerlink" title="网站验证"></a>网站验证</h3><p>当我们部署完我们的网站之后，我们虽然可以直接通过url访问我们的网站，但是我们无法通过搜索引擎检索到我们网站的相关内容，所以我们需要进行<code>网站验证</code>，网站验证主要就是为了让各大搜索引擎搜录我们的网站，这样可以让更多的人通过搜索引擎找到我们的网站。下面我将分享百度、谷歌、Bing三个常见搜索引擎的网站验证教程。</p><h5 id="1-百度："><a href="#1-百度：" class="headerlink" title="1. 百度："></a>1. 百度：</h5><p> (1): 首先我们需要访问<a href="https://ziyuan.baidu.com/">百度搜索资源平台</a>并进行登陆。</p><p> (2): 进入到用户中心的站点管理中，然后点击添加网站 </p><p><img src="https://bu.dusays.com/2025/05/13/68230dfcd574f.png" alt="添加网站"></p><p> (3): 在第三步：验证网站中，我们需要选择HTML标签验证，然后找到hexo项目中的head.pug文件一般路径为：.&#x2F;themes&#x2F;当前应用主题&#x2F;layout&#x2F;includes&#x2F;head.pug, <code>./</code>表示当前的hexo项目根目录，如果找不到在hexo项目中全局搜索即可。</p><p>找到之后我们在文件的最下面添加如下内容即可，谷歌和Bing也是相同的配置，后续不再赘述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 百度的html标记</span><br><span class="line">meta(name=&quot;baidu-site-verification&quot; content=&quot;codeva-vxWGXRA3Ih&quot;)</span><br></pre></td></tr></table></figure><p> (4): 由于百度网页爬虫抓取网站需要时间，因此我们可以手动把我们的网页手动提交到百度搜索引擎中进行搜录：</p><p><img src="https://bu.dusays.com/2025/05/13/682310f49659f.png" alt="网站搜录"></p><p>当我们成功提交之后，只需等待一些时间即可在搜索引擎中检索的我们网站中的相关内容。</p><h5 id="2-谷歌："><a href="#2-谷歌：" class="headerlink" title="2. 谷歌："></a>2. 谷歌：</h5><p> 访问<a href="https://search.google.com/search-console/welcome">Google Search Console</a>，使用<strong>Google账号</strong>登录后并选择第二个选项输入自己的网址即可</p><p><img src="https://bu.dusays.com/2025/05/13/682342d629ac9.png" alt="google search console"></p><p>作者这里因为输入的是https的网址验证直接通过了，如果大家还需要验证的话，选择验证方式为<code>HTML</code>标记，然后和百度的验证方式一致即可，在<code>head.pug</code>文件中添加google的html标记：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 谷歌的html标记</span><br><span class="line">meta(name=&quot;google-site-verification&quot; content=&quot;填入相应码&quot;)</span><br></pre></td></tr></table></figure><p>最后进去google search console管理页面，可以看到需要有一天的时间准备数据：<br><img src="https://bu.dusays.com/2025/05/13/682347302b60a.png" alt="console"></p><h5 id="3-Bing："><a href="#3-Bing：" class="headerlink" title="3. Bing："></a>3. Bing：</h5><p>访问<a href="https://www.bing.com/webmasters/about?setlang=zh-cn">必应网站管理员工具</a>，随后点击开始使用<strong>Google账户</strong>仅进行登陆</p><p><img src="https://bu.dusays.com/2025/05/13/68234a080b939.png" alt="必应网站管理员工具"></p><p>然后选择添加网站时，我们可以选择从<code>Google Search Console</code>中导入，此时我们就可以便捷地把网站信息收录到Bing搜索引擎中了。</p><p>至此，关于Hexo个人博客搭建及上线全流程的内容已经全部结束了，希望我的以上内容可以给你一些帮助，如果你有疑问的话可以在评论区留言，或者给我发电子邮件，我看到后会及时解答，我们下个文章见😁。</p></div>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目搭建 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浮点数的精度问题</title>
      <link href="/Basic/floatingPointPrecision/"/>
      <url>/Basic/floatingPointPrecision/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h3 id="1-两个浮点数是否可以直接比较大小？"><a href="#1-两个浮点数是否可以直接比较大小？" class="headerlink" title="1. 两个浮点数是否可以直接比较大小？"></a>1. 两个浮点数是否可以直接比较大小？</h3><ul><li><p><strong>直接比较的可行性</strong></p><p><strong>大小比较（&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;）</strong>：可以直接使用，因为浮点数的有序性保证了大小关系的正确性。</p><p><strong>示例</strong>：<code>3.14 &gt; 2.71</code> 或 <code>a &lt; b</code> 的运算结果是可靠的。</p></li><li><p><strong>相等性比较（&#x3D;&#x3D;）的风险</strong>：</p><p><strong>精度陷阱</strong>：浮点数的二进制存储可能导致微小误差，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span>  <span class="comment">// 在多数语言中返回 False（实际值是 0.30000000000000004）</span></span><br></pre></td></tr></table></figure></li></ul><p>我们可以看到，两个浮点数由于存在精度问题，所以是无法直接判断是否相等的，那么这是为什么呢，又应该如何解决呢？</p><h3 id="2-浮点数出现精度问题的原因："><a href="#2-浮点数出现精度问题的原因：" class="headerlink" title="2. 浮点数出现精度问题的原因："></a>2. 浮点数出现精度问题的原因：</h3><p>浮点数（例如 <code>double</code> 类型）在计算机中是按照 IEEE 754 标准存储的。这种表示方式由三个部分组成：</p><ol><li><strong>符号位（Sign bit）</strong>：1 位，用于表示正负数。<code>0</code> 表示正数，<code>1</code> 表示负数。</li><li><strong>指数部分（Exponent）</strong>：用于表示数值的大小范围。对于 <code>double</code> 类型，占用 11 位。</li><li><strong>尾数部分（Mantissa or Fraction）</strong>：用于表示有效数字（精度部分），<code>double</code> 类型占用 52 位。</li></ol><p>由于十进制小数通过<strong>乘二取整</strong>法转换成二进制小数后往往是一个无限循环小数，但是计算机存储的尾数部分长度是有限的，所以就会对无限循环小数进行截断，我们在使用的时候，使用的是截断后的二进制数据转换成十进制后的数据 ，这样就导致了误差的产生。下面是具体的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义三个double类型的浮点数a, b, c</span></span><br><span class="line"><span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0.1</span>; <span class="comment">// 0.10000000149011611938476562</span></span><br><span class="line"><span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0.2</span>; <span class="comment">// 0.20000000298023223876953125</span></span><br><span class="line"><span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0.3</span>; <span class="comment">// 0.29999999999999998889776975</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接输出a，b，c的值</span></span><br><span class="line">System.out.println(a); <span class="comment">// 0.1</span></span><br><span class="line">System.out.println(b); <span class="comment">// 0.2</span></span><br><span class="line">System.out.println(c); <span class="comment">// 0.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接打印出来的值没有精度问题，但是如果我们使用这三个变量进行浮点数计算，就会发现出现了精度问题</span></span><br><span class="line">System.out.println(a + b); <span class="comment">// 0.30000000000000004</span></span><br><span class="line">System.out.println(a + b - c); <span class="comment">// 5.551115123125783E-17</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所以当我们使用浮点数直接和0比较大小，或者通过和0比较判断正负时，运行的结果和真实的结果有误差</span></span><br><span class="line">System.out.println((a + b - c) &gt; <span class="number">0</span>); <span class="comment">// 实际的结果为false，但是代码的输出确实true</span></span><br></pre></td></tr></table></figure><h3 id="3-浮点数精度问题的解决方法："><a href="#3-浮点数精度问题的解决方法：" class="headerlink" title="3. 浮点数精度问题的解决方法："></a>3. 浮点数精度问题的解决方法：</h3><p>想要解决浮点数的精度问题，首先要规定一个<strong>误差精度</strong>，当误差的值比这个精度小的话，就认为<strong>没有误差</strong>，误差的精度需要根据具体的业务进行设计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置精度</span></span><br><span class="line"><span class="type">double</span> <span class="variable">epsilon</span> <span class="operator">=</span> <span class="number">1e-16</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0.1</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0.2</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0.3</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(epsilon); </span><br><span class="line">System.out.println(a + b - c); <span class="comment">// 5.551115123125783E-17</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Math.abs(a + b - c) &lt; epsilon) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;a + b - c 和 0 相等&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;a + b - c 和 0 不相等&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行这段代码输出的结果为：a + b - c 和 0 相等，但是当我们把精度调成epsilon = 1e-17的时候，这个结果就会变成a + b - c 和 0 不相等，所以精度的选择是非常重要的，一定要保证业务中浮点数的计算结果不会超过这个精度</span></span><br></pre></td></tr></table></figure><p><strong>常见问题的解决方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设业务中的浮点数计算的误差精度不会超过1e-8，浮点数类型按double计算</span></span><br><span class="line"><span class="type">double</span> <span class="variable">epsilon</span> <span class="operator">=</span> <span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">// 这个temp是业务中通过计算后得到的,这里就不指定具体数值了</span></span><br><span class="line"><span class="type">double</span> temp; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断浮点数是否等于0</span></span><br><span class="line"><span class="keyword">if</span> (Math.abs(temp) &lt; epsilon) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;浮点数：&quot;</span> + temp + <span class="string">&quot;和0相等&quot;</span>);</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断浮点数和0不相等</span></span><br><span class="line"><span class="keyword">if</span> (Math.abs(temp) &gt;= epsilon) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;浮点数：&quot;</span> + temp + <span class="string">&quot;和0不相等&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断浮点数大于0</span></span><br><span class="line"><span class="keyword">if</span> (temp &gt; epsilon) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;浮点数：&quot;</span> + temp + <span class="string">&quot;大于0&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断浮点数小于0</span></span><br><span class="line"><span class="keyword">if</span> (Math.abs(temp) &gt; epsilon &amp;&amp; temp &lt; epsilon) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;浮点数：&quot;</span> + temp + <span class="string">&quot;小于0&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断两个浮点数的大小关系，只需要让这两个浮点数做差，得到一个新的浮点数，然后再和0比较大小即可</span></span><br></pre></td></tr></table></figure><p><strong>可以直接比较大小的情况：</strong>如果是以下的两种情况，两个浮点数可以直接比较大小，精度误差不影响最终结果</p><ul><li>如果比较大小的两个浮点数都是直接定义的或者直接从数据库获取，并且都没有参数过浮点数运算</li><li>非常明确这两个浮点数不会存在相等的情况。</li></ul><h3 id="4-精度问题总结："><a href="#4-精度问题总结：" class="headerlink" title="4. 精度问题总结："></a>4. 精度问题总结：</h3><p>如果想要使用浮点数比较大小的话有两种简单的方法，一种方法是使用<code>round</code>函数，把浮点数的精度限定在一个规定的精度内，在这个精度内进行比较大小；一种方法是定义一个精度<code>epsilon</code>，通过让浮点数和<code>epsilon</code>进行比较来判断浮点数的正负或者两个浮点数的大小关系。</p></div>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中浮点数的进制转换原理</title>
      <link href="/Java/floatingPointNumberBaseConversion/"/>
      <url>/Java/floatingPointNumberBaseConversion/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h3 id="有趣的现象："><a href="#有趣的现象：" class="headerlink" title="有趣的现象："></a>有趣的现象：</h3><p>在Java有一个非常有意思的现象，当我们定义一个浮点数，然后直接打印出来的时候，会发现打印出来的结果就是我们定义的值，但是如果这个浮点数参数了运算，我们打印运算后结果的时候，有时候输出的结果是存储再计算机中<strong>真实的值</strong>，但是有时后又不是，可以参考下面的例子，这是为什么呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0.1</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0.2</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">2.5</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(a); <span class="comment">// 0.1</span></span><br><span class="line">System.out.println(a + b); <span class="comment">// 0.30000000000000004</span></span><br><span class="line">System.out.println(a + c); <span class="comment">// 2.6</span></span><br></pre></td></tr></table></figure><h3 id="转换原理："><a href="#转换原理：" class="headerlink" title="转换原理："></a>转换原理：</h3><p>之所以会出现上面的这种情况，其实是java在把计算机中存储的二进制数据转换成十进制的时候，会把转换后结果的误差限定在**一个ULP(Unit in the Last Place)**的范围内，这样做的效果就是 <strong>可以使用最少的位数精确的表达出来浮点数的数值。</strong>下面是详细的介绍：</p><h5 id="1-Java打印浮点数的流程："><a href="#1-Java打印浮点数的流程：" class="headerlink" title="1. Java打印浮点数的流程："></a>1. Java打印浮点数的流程：</h5><p>众所周知，Java中想要使用print函数进行输出的话，需要把对应的数据类型先转换成String类型才可以，即使是八种基本数据类型也不例外，以下是浮点数在java中被转换成字符串的流程：</p><ul><li>调用Double.toString()方法把浮点数转换成字符串类型<ul><li>继续调用FloatingDecimal.toJavaFormatString(d)方法进行类型的转换</li><li>在上面这个方法中会先调用getBinaryToASCIIConverter(d)方法先把二进制的转换成十进制的结果(在这个过程中会对转换后的十进制数据的精度进行限制)<ul><li>在getBinaryToASCIIConverter(d)方法中会进行参数的构造，然后调用 <strong>dtoa()<strong>方法把</strong>二进制</strong>浮点数转换成<strong>十进制</strong></li></ul></li><li>然后再调用toJavaFormatString()方法把十进制结果转换成字符串</li></ul></li><li>打印转换后的字符串结果</li></ul><h5 id="2-核心方法的源码："><a href="#2-核心方法的源码：" class="headerlink" title="2. 核心方法的源码："></a>2. 核心方法的源码：</h5><p>通过上面的流程其实不难发现，java之所以在打印的时候输出的浮点数精度不一样，全是**dtoa()**方法的功劳，下面是getBinaryToASCIIConverter(d) 和 dtoa( int binExp, long fractBits, int nSignificantBits, boolean isCompatibleFormat)的源码解读。</p><ul><li><p>getBinaryToASCIIConverter(d)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个方法其实就做了一件事，就是为dtoa方法构造参数：</span></span><br><span class="line"><span class="comment"> * 1. 首先把二进制浮点数据转换成长整型数据。之所以要进行转换是因为在计算机底层表示二进制的时候是使用阶码(二进制指数)，符号位以及尾数三个部分进行表示的，如果直接使用二进制浮点数进行后面的转换操作会比较麻烦，并且长整型和二进制浮点数都是64位的，这样可以方便地使用按位操作来提取这些部分，而不是直接进行浮点运算，所以这里转换成了长整型进行后面的操作。</span></span><br><span class="line"><span class="comment"> * 2. 计算出转换需要规格化后的的阶码，符号位，尾数，以及该数据类型的有效位：nSignificantBits</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@param</span> d：原始的double数据</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@param</span> isCompatibleFormat: 是否兼容特定格式(例如:IEEE 754)</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">static</span> BinaryToASCIIConverter <span class="title function_">getBinaryToASCIIConverter</span><span class="params">(<span class="type">double</span> d, <span class="type">boolean</span> isCompatibleFormat)</span> &#123;</span><br><span class="line">    <span class="comment">// 把原始的64位二进制数据转换成64位长整型数据</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">dBits</span> <span class="operator">=</span> Double.doubleToRawLongBits(d);</span><br><span class="line">    <span class="comment">// 通过与符号位掩码 DoubleConsts.SIGN_BIT_MASK 进行按位与操作来判断 d 是否为负数。</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isNegative</span> <span class="operator">=</span> (dBits&amp;DoubleConsts.SIGN_BIT_MASK) != <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 提取出尾数部分（有效位），通过与尾数位掩码 DoubleConsts.SIGNIF_BIT_MASK 进行按位与操作得到</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">fractBits</span> <span class="operator">=</span> dBits &amp; DoubleConsts.SIGNIF_BIT_MASK;</span><br><span class="line">    <span class="comment">// 提取出指数部分。首先用指数位掩码 DoubleConsts.EXP_BIT_MASK 提取出指数，然后右移 EXP_SHIFT 位，得到实际的指数值</span></span><br><span class="line">    <span class="type">int</span>  <span class="variable">binExp</span> <span class="operator">=</span> (<span class="type">int</span>)( (dBits&amp;DoubleConsts.EXP_BIT_MASK) &gt;&gt; EXP_SHIFT );</span><br><span class="line">    <span class="comment">// 检查是否为特殊值（NaN 或无穷大）。如果指数是最大值（表示无穷大或 NaN），且尾数为零，则返回正/负无穷大；否则，返回 NaN。</span></span><br><span class="line">    <span class="keyword">if</span> ( binExp == (<span class="type">int</span>)(DoubleConsts.EXP_BIT_MASK&gt;&gt;EXP_SHIFT) ) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( fractBits == <span class="number">0L</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> isNegative ? B2AC_NEGATIVE_INFINITY : B2AC_POSITIVE_INFINITY;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> B2AC_NOT_A_NUMBER;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span>  nSignificantBits;</span><br><span class="line">    <span class="comment">// 1. 处理非规格化数字：如果指数为0（表示这是一个非规格化的数字），则需要将尾数左移，以便将其转为规格化形式，并调整指数。</span></span><br><span class="line">    <span class="keyword">if</span> ( binExp == <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="comment">// 如果指数为0并且位数也为0的情况，意味着这个浮点数就是0</span></span><br><span class="line">        <span class="keyword">if</span> ( fractBits == <span class="number">0L</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> isNegative ? B2AC_NEGATIVE_ZERO : B2AC_POSITIVE_ZERO;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leadingZeros</span> <span class="operator">=</span> Long.numberOfLeadingZeros(fractBits);</span><br><span class="line">        <span class="type">int</span> <span class="variable">shift</span> <span class="operator">=</span> leadingZeros-(<span class="number">63</span>-EXP_SHIFT);</span><br><span class="line">        fractBits &lt;&lt;= shift;</span><br><span class="line">        binExp = <span class="number">1</span> - shift;</span><br><span class="line">        nSignificantBits =  <span class="number">64</span>-leadingZeros; <span class="comment">// recall binExp is  - shift count.</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 2. 处理规格化数字：如果指数非零，则将尾数与假设的最高有效位 FRACT_HOB 进行按位或操作，计算实际的有效位数 nSignificantBits。(这里其实是一个固定的标准，比如double类型的nSignificantBits固定位53位，float的为22位。</span></span><br><span class="line">        fractBits |= FRACT_HOB;</span><br><span class="line">        nSignificantBits = EXP_SHIFT+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 3. 调整指数偏移：从指数中减去偏移量 DoubleConsts.EXP_BIAS，得到实际的指数值。</span></span><br><span class="line">    binExp -= DoubleConsts.EXP_BIAS;</span><br><span class="line">    <span class="type">BinaryToASCIIBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> getBinaryToASCIIBuffer();</span><br><span class="line">    buf.setSign(isNegative);</span><br><span class="line">    <span class="comment">// 调用dtoa方法完成进制转换以及精度限制</span></span><br><span class="line">    buf.dtoa(binExp, fractBits, nSignificantBits, isCompatibleFormat);</span><br><span class="line">    <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>dtoa( int binExp, long fractBits, int nSignificantBits, boolean isCompatibleFormat)：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 这个方法的作用就是进行二进制与十进制的转换，并对结果进行精度的限制：</span></span><br><span class="line"><span class="comment">    * 1. 进行合法性校验，并计算得到一些转换时必要的参数，像：尾数的有效位，浮点数小数的位数等</span></span><br><span class="line"><span class="comment">    * 2. 判断当前的浮点数是否是简单的数，也就是判断精度大小以及是否是整数，如果是的话直接把二进制转换成十进制就可以了</span></span><br><span class="line"><span class="comment">    * 3. 如果是复杂的浮点数，需要计算得到B5，B2，S5，S2，M5，M2这六个参数，然后通过这六个参数对原来的二进制浮点数进行缩放和精度限制，以得到想要的结果。</span></span><br><span class="line"><span class="comment">    * 4. 对转换完成的结果进行四舍五入，确保最终的十进制表示尽可能精确地反映原始浮点数值</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> binExp 浮点数的二进制指数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fractBits 浮点数的尾数部分</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> nSignificantBits 该浮点类型的有效位</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> isCompatibleFormat 是否兼容特定的格式</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dtoa</span><span class="params">( <span class="type">int</span> binExp, <span class="type">long</span> fractBits, <span class="type">int</span> nSignificantBits, <span class="type">boolean</span> isCompatibleFormat)</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// 保证尾数大于0，小于等于0是没有意义的</span></span><br><span class="line">       <span class="keyword">assert</span> fractBits &gt; <span class="number">0</span> ;</span><br><span class="line">       <span class="comment">// 确保尾数的最高位为1，因为在上面的方法中，尾数已经被规范化了，这里如果为0的化明显是有错误的</span></span><br><span class="line">       <span class="keyword">assert</span> (fractBits &amp; FRACT_HOB)!=<span class="number">0</span>  ;</span><br><span class="line">       <span class="comment">// 计算fractBits末尾有多少个连续的零。</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">int</span> <span class="variable">tailZeros</span> <span class="operator">=</span> Long.numberOfTrailingZeros(fractBits);</span><br><span class="line">       <span class="comment">//  表示该浮点数真实有效的位数。这里 EXP_SHIFT + 1 是一个常量，表示浮点数有效位数的最大值(例如Double类型为53，去除掉尾数末尾连续的0之后的值就是nFractBits)</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">int</span> <span class="variable">nFractBits</span> <span class="operator">=</span> EXP_SHIFT+<span class="number">1</span>-tailZeros;</span><br><span class="line">  </span><br><span class="line">       <span class="comment">// 初始化两个标志位：decimalDigitsRoundedUp 表示是否需要进行四舍五入；exactDecimalConversion 表示是否精确转换（无精度损失）</span></span><br><span class="line">       decimalDigitsRoundedUp = <span class="literal">false</span>;</span><br><span class="line">       exactDecimalConversion = <span class="literal">false</span>;</span><br><span class="line">       <span class="comment">// 计算小数部分的位数 nTinyBits，即有效位数减去指数部分之后的剩余位数，确保其非负。</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">nTinyBits</span> <span class="operator">=</span> Math.max( <span class="number">0</span>, nFractBits - binExp - <span class="number">1</span> );</span><br><span class="line">  </span><br><span class="line">       <span class="comment">// 处理“简单”的数，通过指数的大小判断当前的浮点数是否是极端的数据：指数在MIN_SMALL_BIN_EXP 到 MAX_SMALL_BIN_EXP 之间，表示数值的规模适中，这样的数不需要特别处理极大或极小的情况。它们的二进制浮点表示相对简单，转换成十进制字符串时可以用更高效、简单的方法处理，因此被认为是“容易处理”的数。如果指数 binExp 太小（小于MIN_SMALL_BIN_EXP），表示数值接近于零，可能会有大量前导零，在十进制转换中需要考虑非常小的数字。如果指数binExp 太大（大于 MAX_SMALL_BIN_EXP），表示数值非常大，需要处理大量尾随零和可能的溢出问题。</span></span><br><span class="line">       <span class="keyword">if</span> ( binExp &lt;= MAX_SMALL_BIN_EXP &amp;&amp; binExp &gt;= MIN_SMALL_BIN_EXP )&#123;</span><br><span class="line">  </span><br><span class="line">           <span class="comment">// 判断有效位的位数是否使用long类型可以存储以及是否会发生溢出(使用long类型比使用BigInteger类型计算的更快，所以在这判断了一下是否可以使用long进行加速计算)</span></span><br><span class="line">           <span class="keyword">if</span> ( (nTinyBits &lt; FDBigInteger.LONG_5_POW.length) &amp;&amp; ((nFractBits + N_5_BITS[nTinyBits]) &lt; <span class="number">64</span> ) )&#123;</span><br><span class="line">               <span class="comment">// 未规格化的尾数位数为0表示当前的数没有小数部分，直接使用整数部分的转换方法</span></span><br><span class="line">               <span class="keyword">if</span> ( nTinyBits == <span class="number">0</span> ) &#123;</span><br><span class="line">                   <span class="type">int</span> insignificant;</span><br><span class="line">                   <span class="keyword">if</span> ( binExp &gt; nSignificantBits )&#123;</span><br><span class="line">                       insignificant = insignificantDigitsForPow2(binExp-nSignificantBits-<span class="number">1</span>);</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       insignificant = <span class="number">0</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">// 比较指数和有效位数的大小来使尾数左移或右移对应的尾数，这个操作非常的关键，经过移位后fractBits表示的就是浮点数的尾数了，而是二进制的整数</span></span><br><span class="line">                   <span class="keyword">if</span> ( binExp &gt;= EXP_SHIFT )&#123;</span><br><span class="line">                       fractBits &lt;&lt;= (binExp-EXP_SHIFT);</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       fractBits &gt;&gt;&gt;= (EXP_SHIFT-binExp) ;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">// 调用 developLongDigits 方法将结果转换为十进制字符串表示</span></span><br><span class="line">                   developLongDigits( <span class="number">0</span>, fractBits, insignificant );</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">       <span class="comment">// 通过调用estimateDecExp()来获取当前浮点数的十进制指数</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">decExp</span> <span class="operator">=</span> estimateDecExp(fractBits,binExp);</span><br><span class="line">       <span class="type">int</span> B2, B5;</span><br><span class="line">       <span class="type">int</span> S2, S5;</span><br><span class="line">       <span class="type">int</span> M2, M5;</span><br><span class="line">  </span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 一个十进制可以表示为：x = m * 10^decEXp；进一步可以拆分为：x = m * 2^decExp * 5^decExp,这样就在十进制浮点数和二进制浮点数之间建立了联系(二进制：x = m * 2^binExp）</span></span><br><span class="line"><span class="comment">        * B5：它调整与 5 相关的因子，用来平衡十进制指数的影响，取0和-decExp中的最大值，当decExp &lt; 0时，表示十进制指数是负的，意味着需要将数值缩小到一个更小的范围。因此，我们需要乘以5^B5来抵消负指数的影响</span></span><br><span class="line"><span class="comment">        * B2：B2是一个非负整数，它调整与 2 相关的因子，用来平衡二进制指数的影响，表示在转换过程中，需要乘以 2^B2 以平衡二进制指数的2的部分。</span></span><br><span class="line"><span class="comment">        * S5：它调整与 5 相关的因子，也是用来平衡十进制指数的影响的，取0和decExp中的最大值，当decExp &gt; 0时，表示十进制指数时正的，意味着转换后会将数值放大到一个更大的范围。因此，需要除以5^S5来抵消正指数的影响</span></span><br><span class="line"><span class="comment">        * S2：B2是一个非负整数，它调整与 2 相关的因子，用来平衡二进制指数的影响，表示在转换过程中，需要除以 2^B2 以平衡二进制指数的2的部分。</span></span><br><span class="line"><span class="comment">        * 从上面的定义中不难看出，B 系列负责放大数值，以便将二进制数转换为一个可操作的整数范围。S 系列负责缩小数值，以确保最终结果与十进制表示相符。例如：在将一个二进制浮点数表示成形如 M * 10^E 的十进制形式时：我们需要放大数值 M，使其成为一个适合处理的整数范围，这个放大的操作由 B5 和 B2 来完成。同时，必须确保十进制指数 E 被正确调整。这意味着，我们在放大 M 的时候，还需要相应地缩小与指数相关的部分，这个缩小操作由 S5 和 S2 来完成。</span></span><br><span class="line"><span class="comment">        * 最终的公式：M&#x27; = (M * 2^B2 * 5^B5) / (2^S2 * 5^S5)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       B5 = Math.max( <span class="number">0</span>, -decExp );</span><br><span class="line">       B2 = B5 + nTinyBits + binExp;</span><br><span class="line">       S5 = Math.max( <span class="number">0</span>, decExp );</span><br><span class="line">       S2 = S5 + nTinyBits;</span><br><span class="line">  </span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * M: (1 / 2^nSignificantBits) * 2^nTinyBits * 10^max(0, -decExp), 此时M表示的是 “当前浮点数”的最小浮动单位ULP的一半，这样我们就可以根据M的值来确定转换后的十进制结果的精度了</span></span><br><span class="line"><span class="comment">        * M5：M 的十进制部分(5 的因子)。它表示需要乘以多少个 5 来缩放最小单位 M。M5 被设置为 B5，这意味着在十进制因子方面，M 与 B 有相同的 5 因子。因为我们需要确保在十进制的缩放上，它们是同步的。</span></span><br><span class="line"><span class="comment">        * M2：M 的二进制部分(2 的因子)。它表示需要乘以多少个 2 来缩放最小单位 M。M2 被设定为 B2 - nSignificantBits，这是因为 M 代表了 ULP 的一半。减去 nSignificantBits 后，M 的二进制缩放与 B 对齐，同时反映出 M 的实际二进制精度需求。</span></span><br><span class="line"><span class="comment">        * M系列参数的作用：在十进制转换过程中，我们需要确定要生成多少位数（即确定如何四舍五入）。M 的值用来界定舍入的边界。当我们对十进制数进行迭代计算时，如果余数小于等于 M，那么可以认为当前的十进制结果已经足够准确，不需要再继续计算。例如，当我们得到一个结果 B/S，如果余数（B % S）比 M 更小，则表示这个结果是精确的（在浮点精度范围内），不需要再进一步增加精度。</span></span><br><span class="line"><span class="comment">        * ULP(Unit in the Last Place)：指的是浮点数表示中的最小可分辨单位，每一个浮点数都有一个固定的精度，这种情况下ULP就是该浮点数尾数的最小的变化，如浮点数为0.1，那么下一个可以表示的浮点数就是0.2，此时ULP是这两个浮点数的差异(0.1，0.2)。所以ULP通常用于量化浮点数运算中的误差范围，并确保计算精度。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       M5 = B5;</span><br><span class="line">       M2 = B2 - nSignificantBits;</span><br><span class="line">  </span><br><span class="line">       <span class="comment">// 去掉尾数末尾的0</span></span><br><span class="line">       fractBits &gt;&gt;&gt;= tailZeros;</span><br><span class="line">       <span class="comment">// 作用是调整二进制指数 B2，使得尾数fractBits的最高有效位（最左侧的非零位）与预期的位置对齐。调整 B2 的目的是为了确保在二进制到十进制转换的过程中，计算能够尽可能准确地表示浮点数，减少舍入误差。这种调整使得转换算法能够有效地操作不同表示形式的数值，从而实现高效且精确的计算。</span></span><br><span class="line">       B2 -= nFractBits-<span class="number">1</span>;</span><br><span class="line">       <span class="comment">// 找到B2，S2，M2中的公共因子，把公共因子去掉，这里是方便计算用的</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">common2factor</span> <span class="operator">=</span> Math.min( B2, S2 );</span><br><span class="line">       B2 -= common2factor;</span><br><span class="line">       S2 -= common2factor;</span><br><span class="line">       M2 -= common2factor;</span><br><span class="line">       <span class="comment">// 当尾数只有一位的时候需要让M2的值更小一些，以便能更精确的表示最小化范围的浮点数</span></span><br><span class="line">       <span class="keyword">if</span> ( nFractBits == <span class="number">1</span> ) &#123;</span><br><span class="line">           M2 -= <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 如果M2 = 0表示当前的浮点数精度的上下界已经不能再缩小了，M2 &lt; 0其实是无效的，但实际上又需要进行缩小，所以让B2，S2也缩小相应的值来进行平衡</span></span><br><span class="line">       <span class="keyword">if</span> ( M2 &lt; <span class="number">0</span> )&#123;</span><br><span class="line">           B2 -= M2;</span><br><span class="line">           S2 -= M2;</span><br><span class="line">           M2 =  <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">       <span class="comment">// 转换后十进制的位数</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">ndigit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="comment">// 精度的上下界</span></span><br><span class="line">       <span class="type">boolean</span> low, high;</span><br><span class="line">       <span class="comment">// 用于判断小数点前最后一位的精确度差异</span></span><br><span class="line">       <span class="type">long</span> lowDigitDifference;</span><br><span class="line">       <span class="comment">// 当前十进制位的具体值</span></span><br><span class="line">       <span class="type">int</span>  q;</span><br><span class="line">  </span><br><span class="line">       <span class="comment">// Bbits 是在二进制转换过程中，表示十进制数的二进制位数总数的近似值。这个值包含了尾数的有效位数、乘以 2 的调整以及乘以 5 的调整。通过计算 Bbits，我们可以估算尾数 B 在乘以 5^B5 和 2^B2 后所需的总二进制位数。</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">Bbits</span> <span class="operator">=</span> nFractBits + B2 + (( B5 &lt; N_5_BITS.length )? N_5_BITS[B5] : ( B5*<span class="number">3</span> ));</span><br><span class="line">       <span class="comment">// 乘以10后的有效位数, 程序可以决定使用不同的优化路径来转换浮点数，例如使用整数或长整数运算。</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">tenSbits</span> <span class="operator">=</span> S2+ <span class="number">1</span> + (( (S5+<span class="number">1</span>) &lt; N_5_BITS.length )? N_5_BITS[(S5+<span class="number">1</span>)] : ( (S5+<span class="number">1</span>)*<span class="number">3</span> ));</span><br><span class="line">       <span class="comment">// 根据Bbits以及tenSbits的值来确定使用什么长度的数据类型来转换浮点数，这个方法中，32位/64位/FDBigInteger这三个不同的数据类型的处理逻辑是一样的</span></span><br><span class="line">       <span class="keyword">if</span> ( Bbits &lt; <span class="number">64</span> &amp;&amp; tenSbits &lt; <span class="number">64</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span> ( Bbits &lt; <span class="number">32</span> &amp;&amp; tenSbits &lt; <span class="number">32</span>)&#123;</span><br><span class="line">               <span class="comment">// 计算当前的尾数 fractBits 乘以 5 的 B5 次方，再乘以 2 的 B2 次方。这表示尾数部分的十进制值的起始点</span></span><br><span class="line">               <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> ((<span class="type">int</span>)fractBits * FDBigInteger.SMALL_5_POW[B5] ) &lt;&lt; B2;</span><br><span class="line">               <span class="comment">// 基数部分，乘以 5 的 S5 次方和 2 的 S2 次方</span></span><br><span class="line">               <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> FDBigInteger.SMALL_5_POW[S5] &lt;&lt; S2;</span><br><span class="line">               <span class="comment">// 上下界的差值（用来确定精度范围），乘以 5 的 M5 次方和 2 的 M2 次方。</span></span><br><span class="line">               <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> FDBigInteger.SMALL_5_POW[M5] &lt;&lt; M2;</span><br><span class="line">               <span class="comment">// s 乘以 10，用来确定下一位的十进制值。</span></span><br><span class="line">               <span class="type">int</span> <span class="variable">tens</span> <span class="operator">=</span> s * <span class="number">10</span>;</span><br><span class="line">  </span><br><span class="line">               ndigit = <span class="number">0</span>;</span><br><span class="line">               <span class="comment">// 计算尾数除以基数的商，结果就是当前位的十进制的值</span></span><br><span class="line">               q = b / s;</span><br><span class="line">               <span class="comment">// 将尾数的余数乘以 10，准备计算下一位</span></span><br><span class="line">               b = <span class="number">10</span> * ( b % s );</span><br><span class="line">               <span class="comment">// 将上下界乘以 10，以确保计算精度, 并更新上下界的值</span></span><br><span class="line">               m *= <span class="number">10</span>;</span><br><span class="line">               low  = (b &lt;  m );</span><br><span class="line">               high = (b+m &gt; tens );</span><br><span class="line">               <span class="keyword">assert</span> q &lt; <span class="number">10</span> : q;</span><br><span class="line">               <span class="comment">// 如果第一次计算的商 q 为 0，且不超出范围（!high），则表示估计的指数 decExp 过高，需要减小。</span></span><br><span class="line">               <span class="keyword">if</span> ( (q == <span class="number">0</span>) &amp;&amp; ! high )&#123;</span><br><span class="line">                   decExp--;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="comment">// 将计算的数字字符添加到结果数组中。</span></span><br><span class="line">                   digits[ndigit++] = (<span class="type">char</span>)(<span class="string">&#x27;0&#x27;</span> + q);</span><br><span class="line">               &#125;</span><br><span class="line">  </span><br><span class="line">               <span class="comment">// 判断当前的格式是否与预期的输出格式兼容/指数是否太大或者太小</span></span><br><span class="line">               <span class="keyword">if</span> ( !isCompatibleFormat ||decExp &lt; -<span class="number">3</span> || decExp &gt;= <span class="number">8</span> )&#123;</span><br><span class="line">                   high = low = <span class="literal">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 通过迭代来转换并保存十进制的每一位</span></span><br><span class="line">               <span class="keyword">while</span>( ! low &amp;&amp; ! high )&#123;</span><br><span class="line">                   q = b / s;</span><br><span class="line">                   b = <span class="number">10</span> * ( b % s );</span><br><span class="line">                   m *= <span class="number">10</span>;</span><br><span class="line">                   <span class="keyword">assert</span> q &lt; <span class="number">10</span> : q;</span><br><span class="line">                   <span class="keyword">if</span> ( m &gt; <span class="number">0L</span> )&#123;</span><br><span class="line">                       low  = (b &lt;  m );</span><br><span class="line">                       high = (b+m &gt; tens );</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       low = <span class="literal">true</span>;</span><br><span class="line">                       high = <span class="literal">true</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   digits[ndigit++] = (<span class="type">char</span>)(<span class="string">&#x27;0&#x27;</span> + q);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 用于判断小数点前最后一位的精确度差异</span></span><br><span class="line">               lowDigitDifference = (b&lt;&lt;<span class="number">1</span>) - tens;</span><br><span class="line">               <span class="comment">// 表示是否已经精确转换为十进制表示（b == 0 表示尾数已经全部转换完成）</span></span><br><span class="line">               exactDecimalConversion  = (b == <span class="number">0</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="type">long</span> <span class="variable">b</span> <span class="operator">=</span> (fractBits * FDBigInteger.LONG_5_POW[B5] ) &lt;&lt; B2;</span><br><span class="line">               <span class="type">long</span> <span class="variable">s</span> <span class="operator">=</span> FDBigInteger.LONG_5_POW[S5] &lt;&lt; S2;</span><br><span class="line">               <span class="type">long</span> <span class="variable">m</span> <span class="operator">=</span> FDBigInteger.LONG_5_POW[M5] &lt;&lt; M2;</span><br><span class="line">               <span class="type">long</span> <span class="variable">tens</span> <span class="operator">=</span> s * <span class="number">10L</span>;</span><br><span class="line">  </span><br><span class="line">               ndigit = <span class="number">0</span>;</span><br><span class="line">               q = (<span class="type">int</span>) ( b / s );</span><br><span class="line">               b = <span class="number">10L</span> * ( b % s );</span><br><span class="line">               m *= <span class="number">10L</span>;</span><br><span class="line">               low  = (b &lt;  m );</span><br><span class="line">               high = (b+m &gt; tens );</span><br><span class="line">               <span class="keyword">assert</span> q &lt; <span class="number">10</span> : q;</span><br><span class="line">               <span class="keyword">if</span> ( (q == <span class="number">0</span>) &amp;&amp; ! high )&#123;</span><br><span class="line">                   decExp--;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   digits[ndigit++] = (<span class="type">char</span>)(<span class="string">&#x27;0&#x27;</span> + q);</span><br><span class="line">               &#125;</span><br><span class="line">  </span><br><span class="line">               <span class="keyword">if</span> ( !isCompatibleFormat || decExp &lt; -<span class="number">3</span> || decExp &gt;= <span class="number">8</span> )&#123;</span><br><span class="line">                   high = low = <span class="literal">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">while</span>( ! low &amp;&amp; ! high )&#123;</span><br><span class="line">                   q = (<span class="type">int</span>) ( b / s );</span><br><span class="line">                   b = <span class="number">10</span> * ( b % s );</span><br><span class="line">                   m *= <span class="number">10</span>;</span><br><span class="line">                   <span class="keyword">assert</span> q &lt; <span class="number">10</span> : q;</span><br><span class="line">                   <span class="keyword">if</span> ( m &gt; <span class="number">0L</span> )&#123;</span><br><span class="line">                       low  = (b &lt;  m );</span><br><span class="line">                       high = (b+m &gt; tens );</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       low = <span class="literal">true</span>;</span><br><span class="line">                       high = <span class="literal">true</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   digits[ndigit++] = (<span class="type">char</span>)(<span class="string">&#x27;0&#x27;</span> + q);</span><br><span class="line">               &#125;</span><br><span class="line">               lowDigitDifference = (b&lt;&lt;<span class="number">1</span>) - tens;</span><br><span class="line">               exactDecimalConversion  = (b == <span class="number">0</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  </span><br><span class="line">           <span class="type">FDBigInteger</span> <span class="variable">Sval</span> <span class="operator">=</span> FDBigInteger.valueOfPow52(S5, S2);</span><br><span class="line">           <span class="type">int</span> <span class="variable">shiftBias</span> <span class="operator">=</span> Sval.getNormalizationBias();</span><br><span class="line">           Sval = Sval.leftShift(shiftBias); <span class="comment">// normalize so that division works better</span></span><br><span class="line">  </span><br><span class="line">           <span class="type">FDBigInteger</span> <span class="variable">Bval</span> <span class="operator">=</span> FDBigInteger.valueOfMulPow52(fractBits, B5, B2 + shiftBias);</span><br><span class="line">           <span class="type">FDBigInteger</span> <span class="variable">Mval</span> <span class="operator">=</span> FDBigInteger.valueOfPow52(M5 + <span class="number">1</span>, M2 + shiftBias + <span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">           <span class="type">FDBigInteger</span> <span class="variable">tenSval</span> <span class="operator">=</span> FDBigInteger.valueOfPow52(S5 + <span class="number">1</span>, S2 + shiftBias + <span class="number">1</span>); <span class="comment">//Sval.mult( 10 );</span></span><br><span class="line">  </span><br><span class="line">           ndigit = <span class="number">0</span>;</span><br><span class="line">           q = Bval.quoRemIteration( Sval );</span><br><span class="line">           low  = (Bval.cmp( Mval ) &lt; <span class="number">0</span>);</span><br><span class="line">           high = tenSval.addAndCmp(Bval,Mval)&lt;=<span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">           <span class="keyword">assert</span> q &lt; <span class="number">10</span> : q;</span><br><span class="line">           <span class="keyword">if</span> ( (q == <span class="number">0</span>) &amp;&amp; ! high )&#123;</span><br><span class="line">               decExp--;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               digits[ndigit++] = (<span class="type">char</span>)(<span class="string">&#x27;0&#x27;</span> + q);</span><br><span class="line">           &#125;</span><br><span class="line">  </span><br><span class="line">           <span class="keyword">if</span> (!isCompatibleFormat || decExp &lt; -<span class="number">3</span> || decExp &gt;= <span class="number">8</span> )&#123;</span><br><span class="line">               high = low = <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">while</span>( ! low &amp;&amp; ! high )&#123;</span><br><span class="line">               q = Bval.quoRemIteration( Sval );</span><br><span class="line">               <span class="keyword">assert</span> q &lt; <span class="number">10</span> : q;</span><br><span class="line">               Mval = Mval.multBy10();</span><br><span class="line">               low  = (Bval.cmp( Mval ) &lt; <span class="number">0</span>);</span><br><span class="line">               high = tenSval.addAndCmp(Bval,Mval)&lt;=<span class="number">0</span>;</span><br><span class="line">               digits[ndigit++] = (<span class="type">char</span>)(<span class="string">&#x27;0&#x27;</span> + q);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> ( high &amp;&amp; low )&#123;</span><br><span class="line">               Bval = Bval.leftShift(<span class="number">1</span>);</span><br><span class="line">               lowDigitDifference = Bval.cmp(tenSval);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               lowDigitDifference = <span class="number">0L</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           exactDecimalConversion  = (Bval.cmp( FDBigInteger.ZERO ) == <span class="number">0</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 十进制指数+1，在格式化过程中，指数部分的偏移量需要调整。</span></span><br><span class="line">       <span class="built_in">this</span>.decExponent = decExp+<span class="number">1</span>;</span><br><span class="line">       <span class="comment">// 十进制数字数组 digits 中第一个有效数字的索引。</span></span><br><span class="line">       <span class="built_in">this</span>.firstDigitIndex = <span class="number">0</span>;</span><br><span class="line">       <span class="comment">// nDigits 是有效的数字总数，即转换后得到的十进制数字的位数。</span></span><br><span class="line">       <span class="built_in">this</span>.nDigits = ndigit;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 在浮点数转换过程中，直接使用计算得到的结果可能会导致精度问题。特别是在我们尝试将尾数的二进制部分精确地转换为十进制时，可能会出现以下两种情况：</span></span><br><span class="line"><span class="comment">        *  低估（b &lt; m）：当前的结果 b 在舍入时可能偏低，意味着我们需要增加最后的数字，以接近真实值。</span></span><br><span class="line"><span class="comment">        *  高估（b + m &gt; tens）：当前的结果 b 加上舍入值 m 超过了基准值 tens，这表明当前结果 b 可能高于真实值，我们需要增加最后的数字来修正偏差。</span></span><br><span class="line"><span class="comment">        * 所以：舍入操作是为了在浮点数转换为十进制数时，处理精度和表示问题。通过在 b &lt; m 或 b + m &gt; tens 时进行舍入，可以确保最终的十进制表示尽可能精确地反映原始浮点数值。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">if</span> ( high )&#123;</span><br><span class="line">           <span class="keyword">if</span> ( low )&#123;</span><br><span class="line">               <span class="keyword">if</span> ( lowDigitDifference == <span class="number">0L</span> )&#123;</span><br><span class="line">                   <span class="keyword">if</span> ( (digits[firstDigitIndex+nDigits-<span class="number">1</span>]&amp;<span class="number">1</span>) != <span class="number">0</span> ) &#123;</span><br><span class="line">                       roundup();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( lowDigitDifference &gt; <span class="number">0</span> )&#123;</span><br><span class="line">                   roundup();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               roundup();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="3-具体的例子："><a href="#3-具体的例子：" class="headerlink" title="3. 具体的例子："></a>3. 具体的例子：</h5><p>假如，打印<code>0.1</code> + <code>0.2</code>的值</p><ul><li><p>Java 在执行浮点数运算（如 <code>0.1 + 0.2</code>）时，会先将十进制的浮点数 <code>0.1</code> 和 <code>0.2</code> 转换为符合 IEEE 754 标准的二进制浮点数表示。由于 <code>0.1</code> 和 <code>0.2</code> 不能精确地用二进制表示，因此在这个转换过程中会产生一些精度舍入误差。转换后的二进制数被输入到 CPU 的 ALU进行加法操作。在这一过程中，也可能会因为运算的有限精度再次引入微小的舍入误差，得到一个近似的二进制结果。</p></li><li><p>Java 拿到这个二进制浮点数结果后，会调用 <code>Double.toString()</code> 方法来生成结果的十进制字符串表示。<code>Double.toString()</code> 方法内部使用了 <code>dtoa()</code> 算法，该算法将二进制浮点数转换回十进制，同时根据当前的 <code>M</code> 值（决定输出的有效位数）进行精度舍入。</p></li><li><p>dtoa执行逻辑：</p><ul><li><p>输入参数：</p><ul><li><code>binExp = -2</code>：二进制指数</li><li><code>fractBits = 5404319552844596</code>：64位的长整型尾数。</li><li><code>nSignificantBits = 53</code>：有效位的位数。</li><li><code>isCompatibleFormat = true</code>：是否与 Java 的浮点格式兼容。</li></ul></li><li><p>计算相关参数：</p><ul><li><code>tailZeros = 2</code>：尾数部分的末尾有两个0</li><li><code>nFractBits = 51</code>：尾数部分减去末尾0后的实际的有效位</li><li><code>nTinyBits = 52</code>：二进制浮点数小数的位数</li></ul></li><li><p>判断当前的浮点数是否时<code>简单数</code>，简单数就是大小适中(没有极端值)并且没有小数部分的浮点数，这种浮点数直接移位对齐然后转换成对应的十进制就可以了，很明显这里不是简单数</p></li><li><p>如果当前的浮点数是<code>复杂数</code>，那么就需要先求出对应的六个参数：</p><ul><li><code>B5 = 1</code></li><li><code>B2 = 51</code></li><li><code>S5 = 0</code></li><li><code>S2 = 52</code></li><li><code>M5 = 1</code></li><li><code>M2 = -2</code></li><li>尾数部分右移去除末尾的<code>0</code>，同时<code>B2</code>,<code>S2</code>,<code>M2</code>去除掉公共的指数<ul><li><code>fractBits = 1351079888211149</code></li><li><code>B2 = 0</code></li><li><code>S2 = 51</code></li><li><code>M2 = -3</code>：由于<code>M2 &lt; 0</code>，所以需要把<code>M2</code>置为0，同时<code>B2</code>和<code>S2</code>加上对应的值，所以最终的结果为<code>B2 = 3</code>, <code>S2 = 54</code>,<code>M2 = 0</code></li></ul></li></ul></li><li><p>然后就是具体的计算了，因为当前的类型是double，所以使用的是64位的long来保存中间结果，各中间结果的具体数值如下(可以根据上面源码中的公式计算得出)：</p><ul><li><code>b = 54043195528445960</code></li><li><code>s = 18014398509481984</code></li><li><code>m = 5</code></li><li><code>tens = 180143985094819840</code></li><li><code>q = 3</code></li><li><code>更新后的b = 80</code></li><li><code>low = false</code></li><li><code>high = false</code></li></ul><p>通过判断是否超出精度来决定是否保存的前的结果到digits结果数组中</p></li><li><p>通过执行下面的代码进行不断的迭代最终得到：<code>digits: [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,,,]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( ! low &amp;&amp; ! high )&#123;</span><br><span class="line">    q = (<span class="type">int</span>) ( b / s );</span><br><span class="line">    b = <span class="number">10</span> * ( b % s );</span><br><span class="line">    m *= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">assert</span> q &lt; <span class="number">10</span> : q; </span><br><span class="line">    <span class="keyword">if</span> ( m &gt; <span class="number">0L</span> )&#123;</span><br><span class="line">        low  = (b &lt;  m );</span><br><span class="line">        high = (b+m &gt; tens );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        low = <span class="literal">true</span>;</span><br><span class="line">        high = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    digits[ndigit++] = (<span class="type">char</span>)(<span class="string">&#x27;0&#x27;</span> + q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根据<code>low</code>和<code>high</code>的值判断一下是否需要进行舍入以提高精度，在这个例子中不需要进行舍入操作</p></li><li><p>最后就是把转换后的保存了十进制的<code>digits</code>数据转换成String类型进行输出</p></li></ul></li></ul><h5 id="4-原理总结："><a href="#4-原理总结：" class="headerlink" title="4. 原理总结："></a>4. 原理总结：</h5><p>（1）<strong>Java 中浮点数进制转换的过程和机制：</strong>Java 使用 IEEE 754 双精度浮点数格式（<code>double</code>）来表示浮点数，这种格式将一个浮点数表示为符号位、指数部分和尾数部分的组合。由于十进制小数（如 <code>0.1</code> 或 <code>0.2</code>）无法精确地用二进制表示，所以浮点数的二进制表示通常是一个近似值。这种表示导致在浮点数的计算和转换过程中出现舍入误差。在 Java 中，将浮点数转换为十进制表示是通过 <code>dtoa</code> 方法（double to ASCII）来实现的。在这个方法中，<code>M</code> 的计算决定了输出结果的精度和舍入行为。</p><p>M在 <code>dtoa</code> 方法中的作用：<code>M</code> 的计算和使用决定了浮点数在转换为十进制字符串时的精度和舍入方向，直接影响到最终的输出结果。</p><ul><li>如果 <code>M</code> 较大，表示浮点数的两个相邻值之间有较大的差距，<code>dtoa</code> 方法会选择较少的有效位数来表示数值，从而输出一个更简洁的十进制数。</li><li>果 <code>M</code> 较小，则表示浮点数的相邻值之间的差距很小，<code>dtoa</code> 方法会保留更多的有效位数来确保精度。</li></ul><p>（2）<strong>Java 中浮点数赋值、舍入及运算输出差异的机制</strong></p><ul><li>直接赋值：<ul><li>当浮点数被直接赋值时，Java 将十进制数转换为最接近的 IEEE 754 二进制浮点数表示。转换后的结果是一个近似值。</li><li>输出时，Java 使用 <code>dtoa</code> 方法，将这个二进制表示转回十进制字符串，其中 <code>M</code> 决定了输出的舍入方式和精度。因此，可能会输出一个用户期望的简短结果（如 <code>0.1</code>），而不是精确的二进制表示值。</li></ul></li><li>舍入后的值：<ul><li>当调用round()函数对浮点数进行舍入的时候(BigDecimal的setScale方法为例，这个方法可以在进行精度的舍入的时候保留指定的精度并且可以指定舍入的方向)，首先会根据相关算法进行舍入，然后把十进制的结果换为最接近的二进制浮点数表示。</li><li>输出时还是会调用<code>dtoa</code> 方法，将这个二进制表示转回十进制字符串，输出的舍入方式和精度依旧由M决定。</li></ul></li><li>运算的值：<ul><li>浮点数在运算时（如 <code>0.1 + 0.2</code>），每一步计算都会引入微小的舍入误差，这是因为所有运算都基于浮点数的二进制近似表示。</li><li>运算结果的输出也是通过 <code>dtoa</code> 方法自动格式化的。<code>M</code> 的值决定了输出的有效位数和舍入行为，因此可能会出现 <code>0.30000000000000004</code> 而不是 <code>0.3</code> 的结果。</li></ul></li></ul><p><strong>总之：</strong>在 Java 中，浮点数赋值、舍入和运算的输出差异主要源于二进制浮点数转换为十进制数进行输出的时候，在 <code>dtoa</code> 方法中会根据<code>M</code>的值处理精度和舍入问题，<code>M</code>的值由想要输出的浮点数的内容决定，所以<strong>浮点数本身的精度是决定输出精度的关键而不是操作的类型</strong>(这里的精度指的是浮点数在java中的精度，比如0.1的精度就是小数点后一位)。</p></div>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
            <tag> 源码 </tag>
            
            <tag> 底层 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
